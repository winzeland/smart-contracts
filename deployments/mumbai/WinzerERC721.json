{
  "address": "0x548c6476bBFeE5B99E4E26A371B4775d3184A69C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fatherReceiver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_initBaseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_initContractURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "race",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "sex",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skin",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "head",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "ears",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "hair",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "beard",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "mouth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "eyes",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "eyebrows",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "nose",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "scars",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct WinzerERC721.DNA1",
          "name": "_dna",
          "type": "tuple"
        }
      ],
      "name": "Dna1Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "father",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mother",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "accessory",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "makeup",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill1",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill2",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill3",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill4",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill5",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct WinzerERC721.DNA2",
          "name": "_dna",
          "type": "tuple"
        }
      ],
      "name": "Dna2Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "ProxyRegistryAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dna1",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "race",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "sex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "skin",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "head",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "ears",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "hair",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "beard",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "mouth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "eyes",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "eyebrows",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "nose",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "scars",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dna2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "father",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mother",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "accessory",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "makeup",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "skill1",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "skill2",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "skill3",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "skill4",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "skill5",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "race",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "sex",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skin",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "head",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "ears",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "hair",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "beard",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "mouth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "eyes",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "eyebrows",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "nose",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "scars",
              "type": "uint8"
            }
          ],
          "internalType": "struct WinzerERC721.DNA1",
          "name": "_dna1",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "father",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mother",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "accessory",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "makeup",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill1",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill2",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill3",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill4",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill5",
              "type": "uint8"
            }
          ],
          "internalType": "struct WinzerERC721.DNA2",
          "name": "_dna2",
          "type": "tuple"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxyRegistryAddress",
          "type": "address"
        }
      ],
      "name": "setProxyRegistryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1b6b6d90efe642fcfdf48fff79148db9d4280faaef494237e38c9140f2c4bbbc",
  "receipt": {
    "to": null,
    "from": "0x497971B6535A9f7a5D7ef8e5a6F47bb309A0C3Ea",
    "contractAddress": "0x548c6476bBFeE5B99E4E26A371B4775d3184A69C",
    "transactionIndex": 60,
    "gasUsed": "3130959",
    "logsBloom": "0x
    "blockHash": "0x8236325bc0eebbc0b37d93dbe3f45be02d35bfe299fd754ccf0fe43f522b5df3",
    "transactionHash": "0x1b6b6d90efe642fcfdf48fff79148db9d4280faaef494237e38c9140f2c4bbbc",
    "logs": [
      {
        "transactionIndex": 60,
        "blockNumber": 26436403,
        "transactionHash": "0x1b6b6d90efe642fcfdf48fff79148db9d4280faaef494237e38c9140f2c4bbbc",
        "address": "0x548c6476bBFeE5B99E4E26A371B4775d3184A69C",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000497971b6535a9f7a5d7ef8e5a6f47bb309a0c3ea",
          "0x000000000000000000000000497971b6535a9f7a5d7ef8e5a6f47bb309a0c3ea"
        ],
        "data": "0x",
        "logIndex": 119,
        "blockHash": "0x8236325bc0eebbc0b37d93dbe3f45be02d35bfe299fd754ccf0fe43f522b5df3"
      },
      {
        "transactionIndex": 60,
        "blockNumber": 26436403,
        "transactionHash": "0x1b6b6d90efe642fcfdf48fff79148db9d4280faaef494237e38c9140f2c4bbbc",
        "address": "0x548c6476bBFeE5B99E4E26A371B4775d3184A69C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000497971b6535a9f7a5d7ef8e5a6f47bb309a0c3ea",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 120,
        "blockHash": "0x8236325bc0eebbc0b37d93dbe3f45be02d35bfe299fd754ccf0fe43f522b5df3"
      },
      {
        "transactionIndex": 60,
        "blockNumber": 26436403,
        "transactionHash": "0x1b6b6d90efe642fcfdf48fff79148db9d4280faaef494237e38c9140f2c4bbbc",
        "address": "0x548c6476bBFeE5B99E4E26A371B4775d3184A69C",
        "topics": [
          "0x1a6e49c439dfb32aa6284482bc7a238ce805706dd9b685516123c05e947e7ea3",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x
        "logIndex": 121,
        "blockHash": "0x8236325bc0eebbc0b37d93dbe3f45be02d35bfe299fd754ccf0fe43f522b5df3"
      },
      {
        "transactionIndex": 60,
        "blockNumber": 26436403,
        "transactionHash": "0x1b6b6d90efe642fcfdf48fff79148db9d4280faaef494237e38c9140f2c4bbbc",
        "address": "0x548c6476bBFeE5B99E4E26A371B4775d3184A69C",
        "topics": [
          "0x2036cd788031480791614b2f778f4b472e1a16a7802e76f095f1d00ae4a2be7f",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x
        "logIndex": 122,
        "blockHash": "0x8236325bc0eebbc0b37d93dbe3f45be02d35bfe299fd754ccf0fe43f522b5df3"
      },
      {
        "transactionIndex": 60,
        "blockNumber": 26436403,
        "transactionHash": "0x1b6b6d90efe642fcfdf48fff79148db9d4280faaef494237e38c9140f2c4bbbc",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000497971b6535a9f7a5d7ef8e5a6f47bb309a0c3ea",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000be26512a80b5c90000000000000000000000000000000000000000000000000cd021d730adbfa300000000000000000000000000000000000000000000180b00370202e4c81de30000000000000000000000000000000000000000000000000c11fb86062d09da00000000000000000000000000000000000000000000180b00f528540f48d3ac",
        "logIndex": 123,
        "blockHash": "0x8236325bc0eebbc0b37d93dbe3f45be02d35bfe299fd754ccf0fe43f522b5df3"
      }
    ],
    "blockNumber": 26436403,
    "cumulativeGasUsed": "6041290",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x497971B6535A9f7a5D7ef8e5a6F47bb309A0C3Ea",
    "https://testnet.winzeland.com/meta/winzer/",
    "https://testnet.winzeland.com/meta/contract/winzers"
  ],
  "numDeployments": 2,
  "solcInputHash": "61ab444451bbc0ed4daafa2e82c32f64",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fatherReceiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initContractURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"race\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skin\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"head\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ears\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hair\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"beard\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mouth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyebrows\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"nose\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scars\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct WinzerERC721.DNA1\",\"name\":\"_dna\",\"type\":\"tuple\"}],\"name\":\"Dna1Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"father\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mother\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"accessory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"makeup\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill3\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill4\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill5\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct WinzerERC721.DNA2\",\"name\":\"_dna\",\"type\":\"tuple\"}],\"name\":\"Dna2Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"ProxyRegistryAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dna1\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"race\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skin\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"head\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ears\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hair\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"beard\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mouth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyebrows\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"nose\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scars\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dna2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"father\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mother\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"accessory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"makeup\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill3\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill4\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill5\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"race\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skin\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"head\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ears\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hair\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"beard\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mouth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyebrows\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"nose\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scars\",\"type\":\"uint8\"}],\"internalType\":\"struct WinzerERC721.DNA1\",\"name\":\"_dna1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"father\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mother\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"accessory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"makeup\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill3\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill4\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill5\",\"type\":\"uint8\"}],\"internalType\":\"struct WinzerERC721.DNA2\",\"name\":\"_dna2\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForAll(address,address)\":{\"notice\":\"Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/winzers/WinzerERC721.sol\":\"WinzerERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/ERC721Tradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\n\\ncontract OwnableDelegateProxy {}\\n\\n/**\\n * Used to delegate ownership of a contract to another address, to save on unneeded transactions to approve contract use for users\\n */\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\n/**\\n * @title ERC721Tradable\\n * ERC721Tradable - ERC721 contract that whitelists a trading address\\n */\\nabstract contract ERC721Tradable is ERC721Enumerable, AccessControlEnumerable {\\n    address public proxyRegistryAddress;\\n\\n    event ProxyRegistryAddressChanged(address indexed _newAddress);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC721(_name, _symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        override\\n        public\\n        view\\n        returns (bool)\\n    {\\n        // Whitelist OpenSea proxy contract for easy trading.\\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n        if (address(proxyRegistry.proxies(_owner)) == _operator) {\\n            return true;\\n        }\\n\\n        return super.isApprovedForAll(_owner, _operator);\\n    }\\n\\n    function setProxyRegistryAddress(address _proxyRegistryAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        proxyRegistryAddress = _proxyRegistryAddress;\\n        emit ProxyRegistryAddressChanged(_proxyRegistryAddress);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Enumerable, AccessControlEnumerable) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId\\n         || interfaceId == type(IAccessControlEnumerable).interfaceId\\n         || super.supportsInterface(interfaceId);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return getRoleMember(DEFAULT_ADMIN_ROLE, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x5f35b031a8b7810fafe541238da269c61c6700d9863d12116d6ad254b847ba7a\",\"license\":\"MIT\"},\"contracts/winzers/WinzerERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../ERC721Tradable.sol\\\";\\n\\ncontract WinzerERC721 is ERC721Tradable {\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    struct DNA1 {\\n        uint8 race;\\n        uint8 sex;\\n        uint8 skin;\\n        uint8 head;\\n        uint8 ears;\\n        uint8 hair;\\n        uint8 beard;\\n        uint8 mouth;\\n        uint8 eyes;\\n        uint8 eyebrows;\\n        uint8 nose;\\n        uint8 scars;\\n    }\\n\\n    struct DNA2 {\\n        uint256 father;\\n        uint256 mother;\\n        uint8 accessory;\\n        uint8 makeup;\\n        uint8 skill1;\\n        uint8 skill2;\\n        uint8 skill3;\\n        uint8 skill4;\\n        uint8 skill5;\\n    }\\n\\n    event Dna1Updated(uint256 indexed _tokenId, DNA1 _dna);\\n    event Dna2Updated(uint256 indexed _tokenId, DNA2 _dna);\\n\\n    mapping(uint256 => DNA1) public dna1;\\n    mapping(uint256 => DNA2) public dna2;\\n\\n    string private __baseURI;\\n    string private __contractURI;\\n\\n    constructor(address _fatherReceiver, string memory _initBaseURI, string memory _initContractURI) ERC721Tradable(\\\"Winzeland: Winzer\\\", \\\"Winzer\\\") {\\n        __baseURI = _initBaseURI;\\n        __contractURI = _initContractURI;\\n        // minting \\\"AllFather\\\" as first winzer with all zero traits.\\n        DNA1 memory _dna1;\\n        DNA2 memory _dna2;\\n        _mint(_fatherReceiver, 0);\\n        _setDna1(0, _dna1);\\n        _setExtraDna(0, _dna2);\\n    }\\n\\n    function mint(address player, DNA1 memory _dna1, DNA2 memory _dna2)\\n        public onlyRole(MINTER_ROLE)\\n        returns (uint256) \\n    {\\n        uint256 newItemId = totalSupply();\\n        _mint(player, newItemId);\\n\\n        _setDna1(newItemId, _dna1);\\n        _setExtraDna(newItemId, _dna2);\\n\\n        return newItemId;\\n    }\\n\\n    function _setDna1(uint256 _tokenId, DNA1 memory _dna) internal {\\n        dna1[_tokenId] = _dna;\\n        emit Dna1Updated(_tokenId, _dna);\\n    }\\n\\n    function _setExtraDna(uint256 _tokenId, DNA2 memory _dna) internal {\\n        dna2[_tokenId] = _dna;\\n        emit Dna2Updated(_tokenId, _dna);\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return __baseURI;\\n    }\\n\\n    function setBaseUri(string memory uri) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        __baseURI = uri;\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return __contractURI;\\n    }\\n\\n    function setContractURI(string memory uri) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        __contractURI = uri;\\n    }\\n}\\n\",\"keccak256\":\"0x747cad54720d5d1b994d94caadddd79707c0c07d4a7cf4ad0d20db6b5a216608\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003ec338038062003ec3833981016040819052620000349162000c0a565b60408051808201825260118152702bb4b73d32b630b7321d102bb4b73d32b960791b6020808301918252835180850190945260068452652bb4b73d32b960d11b908401528151919291839183916200008f9160009162000ab1565b508051620000a590600190602084019062000ab1565b50620000b791506000905033620001c1565b50508151620000ce90600f90602085019062000ab1565b508051620000e490601090602084019062000ab1565b506040805161018081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101919091526200019c856000620001d1565b620001a96000836200032b565b620001b660008262000510565b505050505062000eb7565b620001cd828262000617565b5050565b6001600160a01b0382166200022d5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064015b60405180910390fd5b6000818152600260205260409020546001600160a01b031615620002945760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640162000224565b620002a2600083836200065a565b6001600160a01b0382166000908152600360205260408120805460019290620002cd90849062000e19565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80600d600084815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555060608201518160000160036101000a81548160ff021916908360ff16021790555060808201518160000160046101000a81548160ff021916908360ff16021790555060a08201518160000160056101000a81548160ff021916908360ff16021790555060c08201518160000160066101000a81548160ff021916908360ff16021790555060e08201518160000160076101000a81548160ff021916908360ff1602179055506101008201518160000160086101000a81548160ff021916908360ff1602179055506101208201518160000160096101000a81548160ff021916908360ff16021790555061014082015181600001600a6101000a81548160ff021916908360ff16021790555061016082015181600001600b6101000a81548160ff021916908360ff160217905550905050817f1a6e49c439dfb32aa6284482bc7a238ce805706dd9b685516123c05e947e7ea38260405162000504919062000c90565b60405180910390a25050565b6000828152600e60209081526040918290208351815590830151600182015582820151600290910180546060850151608086015160a087015160c088015160e0890151610100808b015160ff998a1661ffff1990981697909717958916029490941763ffff00001916620100009388169390930263ff0000001916929092176301000000918716919091021761ffff60201b19166401000000009186169190910260ff60281b19161765010000000000918516919091021760ff60301b1916660100000000000093909116929092029190911790555182907f2036cd788031480791614b2f778f4b472e1a16a7802e76f095f1d00ae4a2be7f906200050490849062000d7b565b6200062e82826200073660201b6200112c1760201c565b6000828152600b6020908152604090912062000655918390620011ce620007da821b17901c565b505050565b620006728383836200065560201b6200095c1760201c565b6001600160a01b038316620006d057620006ca81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b620006f6565b816001600160a01b0316836001600160a01b031614620006f657620006f68382620007fa565b6001600160a01b03821662000710576200065581620008a7565b826001600160a01b0316826001600160a01b031614620006555762000655828262000985565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff16620001cd576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620007963390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620007f1836001600160a01b038416620009d6565b90505b92915050565b60006001620008148462000a2860201b62000c9a1760201c565b62000820919062000e34565b60008381526007602052604090205490915080821462000874576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090620008bb9060019062000e34565b60008381526009602052604081205460088054939450909284908110620008f257634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600883815481106200092257634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806200096957634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006200099d8362000a2860201b62000c9a1760201c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b600081815260018301602052604081205462000a1f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620007f4565b506000620007f4565b60006001600160a01b03821662000a955760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840162000224565b506001600160a01b031660009081526003602052604090205490565b82805462000abf9062000e4e565b90600052602060002090601f01602090048101928262000ae3576000855562000b2e565b82601f1062000afe57805160ff191683800117855562000b2e565b8280016001018555821562000b2e579182015b8281111562000b2e57825182559160200191906001019062000b11565b5062000b3c92915062000b40565b5090565b5b8082111562000b3c576000815560010162000b41565b600082601f83011262000b68578081fd5b81516001600160401b038082111562000b855762000b8562000ea1565b604051601f8301601f19908116603f0116810190828211818310171562000bb05762000bb062000ea1565b8160405283815260209250868385880101111562000bcc578485fd5b8491505b8382101562000bef578582018301518183018401529082019062000bd0565b8382111562000c0057848385830101525b9695505050505050565b60008060006060848603121562000c1f578283fd5b83516001600160a01b038116811462000c36578384fd5b60208501519093506001600160401b038082111562000c53578384fd5b62000c618783880162000b57565b9350604086015191508082111562000c77578283fd5b5062000c868682870162000b57565b9150509250925092565b815160ff1681526101808101602083015162000cb1602084018260ff169052565b50604083015162000cc7604084018260ff169052565b50606083015162000cdd606084018260ff169052565b50608083015162000cf3608084018260ff169052565b5060a083015162000d0960a084018260ff169052565b5060c083015162000d1f60c084018260ff169052565b5060e083015162000d3560e084018260ff169052565b506101008381015160ff9081169184019190915261012080850151821690840152610140808501518216908401526101608085015191821681850152905b505092915050565b600061012082019050825182526020830151602083015260ff604084015116604083015260ff6060840151166060830152608083015162000dc1608084018260ff169052565b5060a083015162000dd760a084018260ff169052565b5060c083015162000ded60c084018260ff169052565b5060e083015162000e0360e084018260ff169052565b506101008381015160ff81168483015262000d73565b6000821982111562000e2f5762000e2f62000e8b565b500190565b60008282101562000e495762000e4962000e8b565b500390565b600181811c9082168062000e6357607f821691505b6020821081141562000e8557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b612ffc8062000ec76000396000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c806391d148541161012a578063c87b56dd116100bd578063d53913931161008c578063e8a3d48511610071578063e8a3d48514610581578063e985e9c514610589578063f4ee47ac1461059c57600080fd5b8063d539139314610547578063d547741f1461056e57600080fd5b8063c87b56dd146104fb578063ca15c8731461050e578063cd7c032614610521578063d26ea6c01461053457600080fd5b8063a217fddf116100f9578063a217fddf146104ba578063a22cb465146104c2578063b88d4fde146104d5578063c49d183b146104e857600080fd5b806391d1485414610453578063938e3d7b1461048c57806395d89b411461049f578063a0bcfc7f146104a757600080fd5b80632f745c59116101bd5780636352211e1161018c5780637c557a0f116101715780637c557a0f146103755780638da5cb5b146104385780639010d07c1461044057600080fd5b80636352211e1461034f57806370a082311461036257600080fd5b80632f745c591461030357806336568abe1461031657806342842e0e146103295780634f6ccce71461033c57600080fd5b806318160ddd116101f957806318160ddd146102a857806323b872dd146102ba578063248a9ca3146102cd5780632f2ff15d146102f057600080fd5b806301ffc9a71461022b57806306fdde0314610253578063081812fc14610268578063095ea7b314610293575b600080fd5b61023e610239366004612ab7565b6106bd565b60405190151581526020015b60405180910390f35b61025b610703565b60405161024a9190612c69565b61027b610276366004612a5a565b610795565b6040516001600160a01b03909116815260200161024a565b6102a66102a1366004612a2f565b61082f565b005b6008545b60405190815260200161024a565b6102a66102c8366004612816565b610961565b6102ac6102db366004612a5a565b6000908152600a602052604090206001015490565b6102a66102fe366004612a72565b6109e8565b6102ac610311366004612a2f565b610a0e565b6102a6610324366004612a72565b610ab6565b6102a6610337366004612816565b610b42565b6102ac61034a366004612a5a565b610b5d565b61027b61035d366004612a5a565b610c0f565b6102ac6103703660046127c2565b610c9a565b6103e8610383366004612a5a565b600e6020526000908152604090208054600182015460029092015490919060ff80821691610100810482169162010000820481169163010000008104821691640100000000820481169165010000000000810482169166010000000000009091041689565b60408051998a5260208a019890985260ff9687169789019790975293851660608801529184166080870152831660a0860152821660c0850152811660e0840152166101008201526101200161024a565b61027b610d34565b61027b61044e366004612a96565b610d45565b61023e610461366004612a72565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102a661049a366004612b0b565b610d64565b61025b610d83565b6102a66104b5366004612b0b565b610d92565b6102ac600081565b6102a66104d03660046128d3565b610db1565b6102a66104e3366004612856565b610dbc565b6102ac6104f6366004612904565b610e4a565b61025b610509366004612a5a565b610eab565b6102ac61051c366004612a5a565b610f93565b600c5461027b906001600160a01b031681565b6102a66105423660046127c2565b610faa565b6102ac7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102a661057c366004612a72565b61100e565b61025b611034565b61023e6105973660046127de565b611043565b61064f6105aa366004612a5a565b600d6020526000908152604090205460ff808216916101008104821691620100008204811691630100000081048216916401000000008204811691650100000000008104821691660100000000000082048116916701000000000000008104821691680100000000000000008204811691690100000000000000000081048216916a010000000000000000000082048116916b0100000000000000000000009004168c565b6040805160ff9d8e1681529b8d1660208d0152998c16998b0199909952968a1660608a0152948916608089015292881660a088015290871660c0870152861660e08601528516610100850152841661012084015283166101408301529091166101608201526101800161024a565b60006001600160e01b0319821663780e9d6360e01b14806106ee57506001600160e01b03198216635a05180f60e01b145b806106fd57506106fd826111e3565b92915050565b60606000805461071290612eec565b80601f016020809104026020016040519081016040528092919081815260200182805461073e90612eec565b801561078b5780601f106107605761010080835404028352916020019161078b565b820191906000526020600020905b81548152906001019060200180831161076e57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166108135760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061083a82610c0f565b9050806001600160a01b0316836001600160a01b031614156108c45760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161080a565b336001600160a01b03821614806108e057506108e08133611043565b6109525760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161080a565b61095c8383611208565b505050565b61096b3382611283565b6109dd5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161080a565b61095c838383611352565b6000828152600a6020526040902060010154610a048133611537565b61095c83836115b7565b6000610a1983610c9a565b8210610a8d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e6473000000000000000000000000000000000000000000606482015260840161080a565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b0381163314610b345760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161080a565b610b3e82826115d9565b5050565b61095c83838360405180602001604052806000815250610dbc565b6000610b6860085490565b8210610bdc5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e64730000000000000000000000000000000000000000606482015260840161080a565b60088281548110610bfd57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806106fd5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e0000000000000000000000000000000000000000000000606482015260840161080a565b60006001600160a01b038216610d185760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f206164647265737300000000000000000000000000000000000000000000606482015260840161080a565b506001600160a01b031660009081526003602052604090205490565b6000610d408180610d45565b905090565b6000828152600b60205260408120610d5d90836115fb565b9392505050565b6000610d708133611537565b815161095c9060109060208501906125f5565b60606001805461071290612eec565b6000610d9e8133611537565b815161095c90600f9060208501906125f5565b610b3e338383611607565b610dc63383611283565b610e385760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161080a565b610e44848484846116d6565b50505050565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610e778133611537565b6000610e8260085490565b9050610e8e868261175f565b610e9881866118ba565b610ea28185611a9d565b95945050505050565b6000818152600260205260409020546060906001600160a01b0316610f385760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000606482015260840161080a565b6000610f42611ba8565b90506000815111610f625760405180602001604052806000815250610d5d565b80610f6c84611bb7565b604051602001610f7d929190612b7d565b6040516020818303038152906040529392505050565b6000818152600b602052604081206106fd90611cd1565b6000610fb68133611537565b600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517fa2b0839d4585de7874ef6ce1d56318647d0ba0f8661e7ae4b76c47a7d5766b5390600090a25050565b6000828152600a602052604090206001015461102a8133611537565b61095c83836115d9565b60606010805461071290612eec565b600c546040517fc45527910000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260009281169190841690829063c45527919060240160206040518083038186803b1580156110a957600080fd5b505afa1580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e19190612aef565b6001600160a01b031614156110fa5760019150506106fd565b6001600160a01b0380851660009081526005602090815260408083209387168352929052205460ff165b949350505050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff16610b3e576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561118a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610d5d836001600160a01b038416611cdb565b60006001600160e01b03198216635a05180f60e01b14806106fd57506106fd82611d2a565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061124a82610c0f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166112fc5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161080a565b600061130783610c0f565b9050806001600160a01b0316846001600160a01b031614806113425750836001600160a01b031661133784610795565b6001600160a01b0316145b8061112457506111248185611043565b826001600160a01b031661136582610c0f565b6001600160a01b0316146113e15760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e6572000000000000000000000000000000000000000000000000000000606482015260840161080a565b6001600160a01b03821661145c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161080a565b611467838383611d68565b611472600082611208565b6001600160a01b038316600090815260036020526040812080546001929061149b908490612e92565b90915550506001600160a01b03821660009081526003602052604081208054600192906114c9908490612e47565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff16610b3e57611575816001600160a01b03166014611e20565b611580836020611e20565b604051602001611591929190612bac565b60408051601f198184030181529082905262461bcd60e51b825261080a91600401612c69565b6115c1828261112c565b6000828152600b6020526040902061095c90826111ce565b6115e3828261202b565b6000828152600b6020526040902061095c90826120ae565b6000610d5d83836120c3565b816001600160a01b0316836001600160a01b031614156116695760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161080a565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6116e1848484611352565b6116ed848484846120fb565b610e445760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161080a565b6001600160a01b0382166117b55760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161080a565b6000818152600260205260409020546001600160a01b03161561181a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161080a565b61182660008383611d68565b6001600160a01b038216600090815260036020526040812080546001929061184f908490612e47565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80600d600084815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555060608201518160000160036101000a81548160ff021916908360ff16021790555060808201518160000160046101000a81548160ff021916908360ff16021790555060a08201518160000160056101000a81548160ff021916908360ff16021790555060c08201518160000160066101000a81548160ff021916908360ff16021790555060e08201518160000160076101000a81548160ff021916908360ff1602179055506101008201518160000160086101000a81548160ff021916908360ff1602179055506101208201518160000160096101000a81548160ff021916908360ff16021790555061014082015181600001600a6101000a81548160ff021916908360ff16021790555061016082015181600001600b6101000a81548160ff021916908360ff160217905550905050817f1a6e49c439dfb32aa6284482bc7a238ce805706dd9b685516123c05e947e7ea382604051611a919190612c7c565b60405180910390a25050565b6000828152600e60209081526040918290208351815590830151600182015582820151600290910180546060850151608086015160a087015160c088015160e0890151610100808b015160ff998a1661ffff1990981697909717958916029490941763ffff00001916620100009388169390930263ff0000001916929092176301000000918716919091021765ffff0000000019166401000000009186169190910265ff000000000019161765010000000000918516919091021766ff0000000000001916660100000000000093909116929092029190911790555182907f2036cd788031480791614b2f778f4b472e1a16a7802e76f095f1d00ae4a2be7f90611a91908490612d60565b6060600f805461071290612eec565b606081611bdb5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611c055780611bef81612f27565b9150611bfe9050600a83612e5f565b9150611bdf565b60008167ffffffffffffffff811115611c2e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611c58576020820181803683370190505b5090505b841561112457611c6d600183612e92565b9150611c7a600a86612f42565b611c85906030612e47565b60f81b818381518110611ca857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611cca600a86612e5f565b9450611c5c565b60006106fd825490565b6000818152600183016020526040812054611d22575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106fd565b5060006106fd565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806106fd57506106fd8261225e565b6001600160a01b038316611dc357611dbe81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611de6565b816001600160a01b0316836001600160a01b031614611de657611de68382612283565b6001600160a01b038216611dfd5761095c81612320565b826001600160a01b0316826001600160a01b03161461095c5761095c82826123f9565b60606000611e2f836002612e73565b611e3a906002612e47565b67ffffffffffffffff811115611e6057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611e8a576020820181803683370190505b509050600360fc1b81600081518110611eb357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611f0c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611f30846002612e73565b611f3b906001612e47565b90505b6001811115611fdc577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611f8a57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611fae57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611fd581612ed5565b9050611f3e565b508315610d5d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161080a565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff1615610b3e576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610d5d836001600160a01b03841661243d565b60008260000182815481106120e857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006001600160a01b0384163b1561225357604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061213f903390899088908890600401612c2d565b602060405180830381600087803b15801561215957600080fd5b505af1925050508015612189575060408051601f3d908101601f1916820190925261218691810190612ad3565b60015b612239573d8080156121b7576040519150601f19603f3d011682016040523d82523d6000602084013e6121bc565b606091505b5080516122315760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161080a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611124565b506001949350505050565b60006001600160e01b0319821663780e9d6360e01b14806106fd57506106fd8261255a565b6000600161229084610c9a565b61229a9190612e92565b6000838152600760205260409020549091508082146122ed576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061233290600190612e92565b6000838152600960205260408120546008805493945090928490811061236857634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061239757634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806123dd57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061240483610c9a565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60008181526001830160205260408120548015612550576000612461600183612e92565b855490915060009061247590600190612e92565b90508181146124f65760008660000182815481106124a357634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106124d457634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061251557634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106fd565b60009150506106fd565b60006001600160e01b031982167f80ac58cd0000000000000000000000000000000000000000000000000000000014806125bd57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806106fd57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106fd565b82805461260190612eec565b90600052602060002090601f0160209004810192826126235760008555612669565b82601f1061263c57805160ff1916838001178555612669565b82800160010185558215612669579182015b8281111561266957825182559160200191906001019061264e565b50612675929150612679565b5090565b5b80821115612675576000815560010161267a565b600067ffffffffffffffff808411156126a9576126a9612f82565b604051601f8501601f19908116603f011681019082821181831017156126d1576126d1612f82565b816040528093508581528686860111156126ea57600080fd5b858560208301376000602087830101525050509392505050565b60006101208284031215612716578081fd5b61271e612df9565b9050813581526020820135602082015261273a604083016127ac565b604082015261274b606083016127ac565b606082015261275c608083016127ac565b608082015261276d60a083016127ac565b60a082015261277e60c083016127ac565b60c082015261278f60e083016127ac565b60e08201526101006127a28184016127ac565b9082015292915050565b803560ff811681146127bd57600080fd5b919050565b6000602082840312156127d3578081fd5b8135610d5d81612f98565b600080604083850312156127f0578081fd5b82356127fb81612f98565b9150602083013561280b81612f98565b809150509250929050565b60008060006060848603121561282a578081fd5b833561283581612f98565b9250602084013561284581612f98565b929592945050506040919091013590565b6000806000806080858703121561286b578081fd5b843561287681612f98565b9350602085013561288681612f98565b925060408501359150606085013567ffffffffffffffff8111156128a8578182fd5b8501601f810187136128b8578182fd5b6128c78782356020840161268e565b91505092959194509250565b600080604083850312156128e5578182fd5b82356128f081612f98565b91506020830135801515811461280b578182fd5b60008060008385036102c081121561291a578384fd5b843561292581612f98565b9350610180601f19820181131561293a578384fd5b612942612e23565b9150612950602087016127ac565b825261295e604087016127ac565b602083015261296f606087016127ac565b6040830152612980608087016127ac565b606083015261299160a087016127ac565b60808301526129a260c087016127ac565b60a08301526129b360e087016127ac565b60c08301526101006129c68188016127ac565b60e08401526101206129d98189016127ac565b8285015261014091506129ed8289016127ac565b908401526101606129ff8882016127ac565b82850152612a0e8389016127ac565b9084015250909250612a269050856101a08601612704565b90509250925092565b60008060408385031215612a41578182fd5b8235612a4c81612f98565b946020939093013593505050565b600060208284031215612a6b578081fd5b5035919050565b60008060408385031215612a84578182fd5b82359150602083013561280b81612f98565b60008060408385031215612aa8578182fd5b50508035926020909101359150565b600060208284031215612ac8578081fd5b8135610d5d81612fb0565b600060208284031215612ae4578081fd5b8151610d5d81612fb0565b600060208284031215612b00578081fd5b8151610d5d81612f98565b600060208284031215612b1c578081fd5b813567ffffffffffffffff811115612b32578182fd5b8201601f81018413612b42578182fd5b6111248482356020840161268e565b60008151808452612b69816020860160208601612ea9565b601f01601f19169290920160200192915050565b60008351612b8f818460208801612ea9565b835190830190612ba3818360208801612ea9565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612be4816017850160208801612ea9565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612c21816028840160208801612ea9565b01602801949350505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612c5f6080830184612b51565b9695505050505050565b602081526000610d5d6020830184612b51565b815160ff16815261018081016020830151612c9c602084018260ff169052565b506040830151612cb1604084018260ff169052565b506060830151612cc6606084018260ff169052565b506080830151612cdb608084018260ff169052565b5060a0830151612cf060a084018260ff169052565b5060c0830151612d0560c084018260ff169052565b5060e0830151612d1a60e084018260ff169052565b506101008381015160ff9081169184019190915261012080850151821690840152610140808501518216908401526101608085015191821681850152905b505092915050565b600061012082019050825182526020830151602083015260ff604084015116604083015260ff60608401511660608301526080830151612da5608084018260ff169052565b5060a0830151612dba60a084018260ff169052565b5060c0830151612dcf60c084018260ff169052565b5060e0830151612de460e084018260ff169052565b506101008381015160ff811684830152612d58565b604051610120810167ffffffffffffffff81118282101715612e1d57612e1d612f82565b60405290565b604051610180810167ffffffffffffffff81118282101715612e1d57612e1d612f82565b60008219821115612e5a57612e5a612f56565b500190565b600082612e6e57612e6e612f6c565b500490565b6000816000190483118215151615612e8d57612e8d612f56565b500290565b600082821015612ea457612ea4612f56565b500390565b60005b83811015612ec4578181015183820152602001612eac565b83811115610e445750506000910152565b600081612ee457612ee4612f56565b506000190190565b600181811c90821680612f0057607f821691505b60208210811415612f2157634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612f3b57612f3b612f56565b5060010190565b600082612f5157612f51612f6c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612fad57600080fd5b50565b6001600160e01b031981168114612fad57600080fdfea2646970667358221220f46316229b33c45434bc41c37a77ebebbce94477904f0b1424948d5ef6ba5f6b64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102265760003560e01c806391d148541161012a578063c87b56dd116100bd578063d53913931161008c578063e8a3d48511610071578063e8a3d48514610581578063e985e9c514610589578063f4ee47ac1461059c57600080fd5b8063d539139314610547578063d547741f1461056e57600080fd5b8063c87b56dd146104fb578063ca15c8731461050e578063cd7c032614610521578063d26ea6c01461053457600080fd5b8063a217fddf116100f9578063a217fddf146104ba578063a22cb465146104c2578063b88d4fde146104d5578063c49d183b146104e857600080fd5b806391d1485414610453578063938e3d7b1461048c57806395d89b411461049f578063a0bcfc7f146104a757600080fd5b80632f745c59116101bd5780636352211e1161018c5780637c557a0f116101715780637c557a0f146103755780638da5cb5b146104385780639010d07c1461044057600080fd5b80636352211e1461034f57806370a082311461036257600080fd5b80632f745c591461030357806336568abe1461031657806342842e0e146103295780634f6ccce71461033c57600080fd5b806318160ddd116101f957806318160ddd146102a857806323b872dd146102ba578063248a9ca3146102cd5780632f2ff15d146102f057600080fd5b806301ffc9a71461022b57806306fdde0314610253578063081812fc14610268578063095ea7b314610293575b600080fd5b61023e610239366004612ab7565b6106bd565b60405190151581526020015b60405180910390f35b61025b610703565b60405161024a9190612c69565b61027b610276366004612a5a565b610795565b6040516001600160a01b03909116815260200161024a565b6102a66102a1366004612a2f565b61082f565b005b6008545b60405190815260200161024a565b6102a66102c8366004612816565b610961565b6102ac6102db366004612a5a565b6000908152600a602052604090206001015490565b6102a66102fe366004612a72565b6109e8565b6102ac610311366004612a2f565b610a0e565b6102a6610324366004612a72565b610ab6565b6102a6610337366004612816565b610b42565b6102ac61034a366004612a5a565b610b5d565b61027b61035d366004612a5a565b610c0f565b6102ac6103703660046127c2565b610c9a565b6103e8610383366004612a5a565b600e6020526000908152604090208054600182015460029092015490919060ff80821691610100810482169162010000820481169163010000008104821691640100000000820481169165010000000000810482169166010000000000009091041689565b60408051998a5260208a019890985260ff9687169789019790975293851660608801529184166080870152831660a0860152821660c0850152811660e0840152166101008201526101200161024a565b61027b610d34565b61027b61044e366004612a96565b610d45565b61023e610461366004612a72565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6102a661049a366004612b0b565b610d64565b61025b610d83565b6102a66104b5366004612b0b565b610d92565b6102ac600081565b6102a66104d03660046128d3565b610db1565b6102a66104e3366004612856565b610dbc565b6102ac6104f6366004612904565b610e4a565b61025b610509366004612a5a565b610eab565b6102ac61051c366004612a5a565b610f93565b600c5461027b906001600160a01b031681565b6102a66105423660046127c2565b610faa565b6102ac7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6102a661057c366004612a72565b61100e565b61025b611034565b61023e6105973660046127de565b611043565b61064f6105aa366004612a5a565b600d6020526000908152604090205460ff808216916101008104821691620100008204811691630100000081048216916401000000008204811691650100000000008104821691660100000000000082048116916701000000000000008104821691680100000000000000008204811691690100000000000000000081048216916a010000000000000000000082048116916b0100000000000000000000009004168c565b6040805160ff9d8e1681529b8d1660208d0152998c16998b0199909952968a1660608a0152948916608089015292881660a088015290871660c0870152861660e08601528516610100850152841661012084015283166101408301529091166101608201526101800161024a565b60006001600160e01b0319821663780e9d6360e01b14806106ee57506001600160e01b03198216635a05180f60e01b145b806106fd57506106fd826111e3565b92915050565b60606000805461071290612eec565b80601f016020809104026020016040519081016040528092919081815260200182805461073e90612eec565b801561078b5780601f106107605761010080835404028352916020019161078b565b820191906000526020600020905b81548152906001019060200180831161076e57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166108135760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061083a82610c0f565b9050806001600160a01b0316836001600160a01b031614156108c45760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161080a565b336001600160a01b03821614806108e057506108e08133611043565b6109525760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161080a565b61095c8383611208565b505050565b61096b3382611283565b6109dd5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161080a565b61095c838383611352565b6000828152600a6020526040902060010154610a048133611537565b61095c83836115b7565b6000610a1983610c9a565b8210610a8d5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e6473000000000000000000000000000000000000000000606482015260840161080a565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b0381163314610b345760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161080a565b610b3e82826115d9565b5050565b61095c83838360405180602001604052806000815250610dbc565b6000610b6860085490565b8210610bdc5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e64730000000000000000000000000000000000000000606482015260840161080a565b60088281548110610bfd57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806106fd5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e0000000000000000000000000000000000000000000000606482015260840161080a565b60006001600160a01b038216610d185760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f206164647265737300000000000000000000000000000000000000000000606482015260840161080a565b506001600160a01b031660009081526003602052604090205490565b6000610d408180610d45565b905090565b6000828152600b60205260408120610d5d90836115fb565b9392505050565b6000610d708133611537565b815161095c9060109060208501906125f5565b60606001805461071290612eec565b6000610d9e8133611537565b815161095c90600f9060208501906125f5565b610b3e338383611607565b610dc63383611283565b610e385760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f766564000000000000000000000000000000606482015260840161080a565b610e44848484846116d6565b50505050565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610e778133611537565b6000610e8260085490565b9050610e8e868261175f565b610e9881866118ba565b610ea28185611a9d565b95945050505050565b6000818152600260205260409020546060906001600160a01b0316610f385760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000606482015260840161080a565b6000610f42611ba8565b90506000815111610f625760405180602001604052806000815250610d5d565b80610f6c84611bb7565b604051602001610f7d929190612b7d565b6040516020818303038152906040529392505050565b6000818152600b602052604081206106fd90611cd1565b6000610fb68133611537565b600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091556040517fa2b0839d4585de7874ef6ce1d56318647d0ba0f8661e7ae4b76c47a7d5766b5390600090a25050565b6000828152600a602052604090206001015461102a8133611537565b61095c83836115d9565b60606010805461071290612eec565b600c546040517fc45527910000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260009281169190841690829063c45527919060240160206040518083038186803b1580156110a957600080fd5b505afa1580156110bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e19190612aef565b6001600160a01b031614156110fa5760019150506106fd565b6001600160a01b0380851660009081526005602090815260408083209387168352929052205460ff165b949350505050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff16610b3e576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561118a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610d5d836001600160a01b038416611cdb565b60006001600160e01b03198216635a05180f60e01b14806106fd57506106fd82611d2a565b6000818152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038416908117909155819061124a82610c0f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166112fc5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161080a565b600061130783610c0f565b9050806001600160a01b0316846001600160a01b031614806113425750836001600160a01b031661133784610795565b6001600160a01b0316145b8061112457506111248185611043565b826001600160a01b031661136582610c0f565b6001600160a01b0316146113e15760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e6572000000000000000000000000000000000000000000000000000000606482015260840161080a565b6001600160a01b03821661145c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161080a565b611467838383611d68565b611472600082611208565b6001600160a01b038316600090815260036020526040812080546001929061149b908490612e92565b90915550506001600160a01b03821660009081526003602052604081208054600192906114c9908490612e47565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff16610b3e57611575816001600160a01b03166014611e20565b611580836020611e20565b604051602001611591929190612bac565b60408051601f198184030181529082905262461bcd60e51b825261080a91600401612c69565b6115c1828261112c565b6000828152600b6020526040902061095c90826111ce565b6115e3828261202b565b6000828152600b6020526040902061095c90826120ae565b6000610d5d83836120c3565b816001600160a01b0316836001600160a01b031614156116695760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161080a565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6116e1848484611352565b6116ed848484846120fb565b610e445760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161080a565b6001600160a01b0382166117b55760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161080a565b6000818152600260205260409020546001600160a01b03161561181a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161080a565b61182660008383611d68565b6001600160a01b038216600090815260036020526040812080546001929061184f908490612e47565b9091555050600081815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80600d600084815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555060608201518160000160036101000a81548160ff021916908360ff16021790555060808201518160000160046101000a81548160ff021916908360ff16021790555060a08201518160000160056101000a81548160ff021916908360ff16021790555060c08201518160000160066101000a81548160ff021916908360ff16021790555060e08201518160000160076101000a81548160ff021916908360ff1602179055506101008201518160000160086101000a81548160ff021916908360ff1602179055506101208201518160000160096101000a81548160ff021916908360ff16021790555061014082015181600001600a6101000a81548160ff021916908360ff16021790555061016082015181600001600b6101000a81548160ff021916908360ff160217905550905050817f1a6e49c439dfb32aa6284482bc7a238ce805706dd9b685516123c05e947e7ea382604051611a919190612c7c565b60405180910390a25050565b6000828152600e60209081526040918290208351815590830151600182015582820151600290910180546060850151608086015160a087015160c088015160e0890151610100808b015160ff998a1661ffff1990981697909717958916029490941763ffff00001916620100009388169390930263ff0000001916929092176301000000918716919091021765ffff0000000019166401000000009186169190910265ff000000000019161765010000000000918516919091021766ff0000000000001916660100000000000093909116929092029190911790555182907f2036cd788031480791614b2f778f4b472e1a16a7802e76f095f1d00ae4a2be7f90611a91908490612d60565b6060600f805461071290612eec565b606081611bdb5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611c055780611bef81612f27565b9150611bfe9050600a83612e5f565b9150611bdf565b60008167ffffffffffffffff811115611c2e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611c58576020820181803683370190505b5090505b841561112457611c6d600183612e92565b9150611c7a600a86612f42565b611c85906030612e47565b60f81b818381518110611ca857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611cca600a86612e5f565b9450611c5c565b60006106fd825490565b6000818152600183016020526040812054611d22575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106fd565b5060006106fd565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806106fd57506106fd8261225e565b6001600160a01b038316611dc357611dbe81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611de6565b816001600160a01b0316836001600160a01b031614611de657611de68382612283565b6001600160a01b038216611dfd5761095c81612320565b826001600160a01b0316826001600160a01b03161461095c5761095c82826123f9565b60606000611e2f836002612e73565b611e3a906002612e47565b67ffffffffffffffff811115611e6057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611e8a576020820181803683370190505b509050600360fc1b81600081518110611eb357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611f0c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611f30846002612e73565b611f3b906001612e47565b90505b6001811115611fdc577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611f8a57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611fae57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611fd581612ed5565b9050611f3e565b508315610d5d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161080a565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff1615610b3e576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610d5d836001600160a01b03841661243d565b60008260000182815481106120e857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006001600160a01b0384163b1561225357604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061213f903390899088908890600401612c2d565b602060405180830381600087803b15801561215957600080fd5b505af1925050508015612189575060408051601f3d908101601f1916820190925261218691810190612ad3565b60015b612239573d8080156121b7576040519150601f19603f3d011682016040523d82523d6000602084013e6121bc565b606091505b5080516122315760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e7465720000000000000000000000000000606482015260840161080a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611124565b506001949350505050565b60006001600160e01b0319821663780e9d6360e01b14806106fd57506106fd8261255a565b6000600161229084610c9a565b61229a9190612e92565b6000838152600760205260409020549091508082146122ed576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061233290600190612e92565b6000838152600960205260408120546008805493945090928490811061236857634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061239757634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806123dd57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061240483610c9a565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60008181526001830160205260408120548015612550576000612461600183612e92565b855490915060009061247590600190612e92565b90508181146124f65760008660000182815481106124a357634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106124d457634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061251557634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106fd565b60009150506106fd565b60006001600160e01b031982167f80ac58cd0000000000000000000000000000000000000000000000000000000014806125bd57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806106fd57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146106fd565b82805461260190612eec565b90600052602060002090601f0160209004810192826126235760008555612669565b82601f1061263c57805160ff1916838001178555612669565b82800160010185558215612669579182015b8281111561266957825182559160200191906001019061264e565b50612675929150612679565b5090565b5b80821115612675576000815560010161267a565b600067ffffffffffffffff808411156126a9576126a9612f82565b604051601f8501601f19908116603f011681019082821181831017156126d1576126d1612f82565b816040528093508581528686860111156126ea57600080fd5b858560208301376000602087830101525050509392505050565b60006101208284031215612716578081fd5b61271e612df9565b9050813581526020820135602082015261273a604083016127ac565b604082015261274b606083016127ac565b606082015261275c608083016127ac565b608082015261276d60a083016127ac565b60a082015261277e60c083016127ac565b60c082015261278f60e083016127ac565b60e08201526101006127a28184016127ac565b9082015292915050565b803560ff811681146127bd57600080fd5b919050565b6000602082840312156127d3578081fd5b8135610d5d81612f98565b600080604083850312156127f0578081fd5b82356127fb81612f98565b9150602083013561280b81612f98565b809150509250929050565b60008060006060848603121561282a578081fd5b833561283581612f98565b9250602084013561284581612f98565b929592945050506040919091013590565b6000806000806080858703121561286b578081fd5b843561287681612f98565b9350602085013561288681612f98565b925060408501359150606085013567ffffffffffffffff8111156128a8578182fd5b8501601f810187136128b8578182fd5b6128c78782356020840161268e565b91505092959194509250565b600080604083850312156128e5578182fd5b82356128f081612f98565b91506020830135801515811461280b578182fd5b60008060008385036102c081121561291a578384fd5b843561292581612f98565b9350610180601f19820181131561293a578384fd5b612942612e23565b9150612950602087016127ac565b825261295e604087016127ac565b602083015261296f606087016127ac565b6040830152612980608087016127ac565b606083015261299160a087016127ac565b60808301526129a260c087016127ac565b60a08301526129b360e087016127ac565b60c08301526101006129c68188016127ac565b60e08401526101206129d98189016127ac565b8285015261014091506129ed8289016127ac565b908401526101606129ff8882016127ac565b82850152612a0e8389016127ac565b9084015250909250612a269050856101a08601612704565b90509250925092565b60008060408385031215612a41578182fd5b8235612a4c81612f98565b946020939093013593505050565b600060208284031215612a6b578081fd5b5035919050565b60008060408385031215612a84578182fd5b82359150602083013561280b81612f98565b60008060408385031215612aa8578182fd5b50508035926020909101359150565b600060208284031215612ac8578081fd5b8135610d5d81612fb0565b600060208284031215612ae4578081fd5b8151610d5d81612fb0565b600060208284031215612b00578081fd5b8151610d5d81612f98565b600060208284031215612b1c578081fd5b813567ffffffffffffffff811115612b32578182fd5b8201601f81018413612b42578182fd5b6111248482356020840161268e565b60008151808452612b69816020860160208601612ea9565b601f01601f19169290920160200192915050565b60008351612b8f818460208801612ea9565b835190830190612ba3818360208801612ea9565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612be4816017850160208801612ea9565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612c21816028840160208801612ea9565b01602801949350505050565b60006001600160a01b03808716835280861660208401525083604083015260806060830152612c5f6080830184612b51565b9695505050505050565b602081526000610d5d6020830184612b51565b815160ff16815261018081016020830151612c9c602084018260ff169052565b506040830151612cb1604084018260ff169052565b506060830151612cc6606084018260ff169052565b506080830151612cdb608084018260ff169052565b5060a0830151612cf060a084018260ff169052565b5060c0830151612d0560c084018260ff169052565b5060e0830151612d1a60e084018260ff169052565b506101008381015160ff9081169184019190915261012080850151821690840152610140808501518216908401526101608085015191821681850152905b505092915050565b600061012082019050825182526020830151602083015260ff604084015116604083015260ff60608401511660608301526080830151612da5608084018260ff169052565b5060a0830151612dba60a084018260ff169052565b5060c0830151612dcf60c084018260ff169052565b5060e0830151612de460e084018260ff169052565b506101008381015160ff811684830152612d58565b604051610120810167ffffffffffffffff81118282101715612e1d57612e1d612f82565b60405290565b604051610180810167ffffffffffffffff81118282101715612e1d57612e1d612f82565b60008219821115612e5a57612e5a612f56565b500190565b600082612e6e57612e6e612f6c565b500490565b6000816000190483118215151615612e8d57612e8d612f56565b500290565b600082821015612ea457612ea4612f56565b500390565b60005b83811015612ec4578181015183820152602001612eac565b83811115610e445750506000910152565b600081612ee457612ee4612f56565b506000190190565b600181811c90821680612f0057607f821691505b60208210811415612f2157634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612f3b57612f3b612f56565b5060010190565b600082612f5157612f51612f6c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114612fad57600080fd5b50565b6001600160e01b031981168114612fad57600080fdfea2646970667358221220f46316229b33c45434bc41c37a77ebebbce94477904f0b1424948d5ef6ba5f6b64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isApprovedForAll(address,address)": {
        "notice": "Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2627,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2629,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2633,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2637,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2641,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2647,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3616,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3620,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3623,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3627,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 24,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_roles",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 327,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)5584_storage)"
      },
      {
        "astId": 5893,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "proxyRegistryAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 8176,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "dna1",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(DNA1)8138_storage)"
      },
      {
        "astId": 8181,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "dna2",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(DNA2)8157_storage)"
      },
      {
        "astId": 8183,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "__baseURI",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 8185,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "__contractURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)5584_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)5584_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(DNA1)8138_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WinzerERC721.DNA1)",
        "numberOfBytes": "32",
        "value": "t_struct(DNA1)8138_storage"
      },
      "t_mapping(t_uint256,t_struct(DNA2)8157_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WinzerERC721.DNA2)",
        "numberOfBytes": "32",
        "value": "t_struct(DNA2)8157_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)5584_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 5583,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)5283_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DNA1)8138_storage": {
        "encoding": "inplace",
        "label": "struct WinzerERC721.DNA1",
        "members": [
          {
            "astId": 8115,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "race",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8117,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "sex",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8119,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "skin",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8121,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "head",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8123,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "ears",
            "offset": 4,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8125,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "hair",
            "offset": 5,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8127,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "beard",
            "offset": 6,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8129,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "mouth",
            "offset": 7,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8131,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "eyes",
            "offset": 8,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8133,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "eyebrows",
            "offset": 9,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8135,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "nose",
            "offset": 10,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 8137,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "scars",
            "offset": 11,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DNA2)8157_storage": {
        "encoding": "inplace",
        "label": "struct WinzerERC721.DNA2",
        "members": [
          {
            "astId": 8140,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "father",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8142,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "mother",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8144,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "accessory",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 8146,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "makeup",
            "offset": 1,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 8148,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "skill1",
            "offset": 2,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 8150,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "skill2",
            "offset": 3,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 8152,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "skill3",
            "offset": 4,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 8154,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "skill4",
            "offset": 5,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 8156,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "skill5",
            "offset": 6,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)5283_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5278,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 5282,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}