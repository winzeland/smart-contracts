{
  "address": "0x929F194985E221C07cDE0902D74789E3637F8EA4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fatherReceiver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_initBaseURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_initContractURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "race",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "sex",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skin",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "head",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "ears",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "hair",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "beard",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "mouth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "eyes",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "eyebrows",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "nose",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "scars",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct WinzerERC721.DNA1",
          "name": "_dna",
          "type": "tuple"
        }
      ],
      "name": "Dna1Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "father",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mother",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "accessory",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "makeup",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill1",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill2",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill3",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill4",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill5",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct WinzerERC721.DNA2",
          "name": "_dna",
          "type": "tuple"
        }
      ],
      "name": "Dna2Updated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "ProxyRegistryAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dna1",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "race",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "sex",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "skin",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "head",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "ears",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "hair",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "beard",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "mouth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "eyes",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "eyebrows",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "nose",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "scars",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dna2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "father",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mother",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "accessory",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "makeup",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "skill1",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "skill2",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "skill3",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "skill4",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "skill5",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "race",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "sex",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skin",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "head",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "ears",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "hair",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "beard",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "mouth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "eyes",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "eyebrows",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "nose",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "scars",
              "type": "uint8"
            }
          ],
          "internalType": "struct WinzerERC721.DNA1",
          "name": "_dna1",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "father",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "mother",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "accessory",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "makeup",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill1",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill2",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill3",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill4",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "skill5",
              "type": "uint8"
            }
          ],
          "internalType": "struct WinzerERC721.DNA2",
          "name": "_dna2",
          "type": "tuple"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setBaseUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxyRegistryAddress",
          "type": "address"
        }
      ],
      "name": "setProxyRegistryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5b7bdd527837c1fdb8412d570cd78f70664e8f746acbd7493cdabcab6af158c2",
  "receipt": {
    "to": null,
    "from": "0x497971B6535A9f7a5D7ef8e5a6F47bb309A0C3Ea",
    "contractAddress": "0x929F194985E221C07cDE0902D74789E3637F8EA4",
    "transactionIndex": 20,
    "gasUsed": "5054409",
    "logsBloom": "0x
    "blockHash": "0x7ba24c69df8ef291dc92ed1dc8da35978774a8b297f5db3c806061cf91649cc6",
    "transactionHash": "0x5b7bdd527837c1fdb8412d570cd78f70664e8f746acbd7493cdabcab6af158c2",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 26317198,
        "transactionHash": "0x5b7bdd527837c1fdb8412d570cd78f70664e8f746acbd7493cdabcab6af158c2",
        "address": "0x929F194985E221C07cDE0902D74789E3637F8EA4",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000497971b6535a9f7a5d7ef8e5a6f47bb309a0c3ea",
          "0x000000000000000000000000497971b6535a9f7a5d7ef8e5a6f47bb309a0c3ea"
        ],
        "data": "0x",
        "logIndex": 39,
        "blockHash": "0x7ba24c69df8ef291dc92ed1dc8da35978774a8b297f5db3c806061cf91649cc6"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 26317198,
        "transactionHash": "0x5b7bdd527837c1fdb8412d570cd78f70664e8f746acbd7493cdabcab6af158c2",
        "address": "0x929F194985E221C07cDE0902D74789E3637F8EA4",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000497971b6535a9f7a5d7ef8e5a6f47bb309a0c3ea",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 40,
        "blockHash": "0x7ba24c69df8ef291dc92ed1dc8da35978774a8b297f5db3c806061cf91649cc6"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 26317198,
        "transactionHash": "0x5b7bdd527837c1fdb8412d570cd78f70664e8f746acbd7493cdabcab6af158c2",
        "address": "0x929F194985E221C07cDE0902D74789E3637F8EA4",
        "topics": [
          "0x1a6e49c439dfb32aa6284482bc7a238ce805706dd9b685516123c05e947e7ea3",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x
        "logIndex": 41,
        "blockHash": "0x7ba24c69df8ef291dc92ed1dc8da35978774a8b297f5db3c806061cf91649cc6"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 26317198,
        "transactionHash": "0x5b7bdd527837c1fdb8412d570cd78f70664e8f746acbd7493cdabcab6af158c2",
        "address": "0x929F194985E221C07cDE0902D74789E3637F8EA4",
        "topics": [
          "0x2036cd788031480791614b2f778f4b472e1a16a7802e76f095f1d00ae4a2be7f",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x
        "logIndex": 42,
        "blockHash": "0x7ba24c69df8ef291dc92ed1dc8da35978774a8b297f5db3c806061cf91649cc6"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 26317198,
        "transactionHash": "0x5b7bdd527837c1fdb8412d570cd78f70664e8f746acbd7493cdabcab6af158c2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000497971b6535a9f7a5d7ef8e5a6f47bb309a0c3ea",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000b801ab942f9e680000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000001fb6456693de2d7721e0000000000000000000000000000000000000000000000000d28b508133461980000000000000000000000000000000000000000000001fb650e6ae977071086",
        "logIndex": 43,
        "blockHash": "0x7ba24c69df8ef291dc92ed1dc8da35978774a8b297f5db3c806061cf91649cc6"
      }
    ],
    "blockNumber": 26317198,
    "cumulativeGasUsed": "7810654",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x497971B6535A9f7a5D7ef8e5a6F47bb309A0C3Ea",
    "https://testnet.winzeland.com/meta/winzer/",
    "https://testnet.winzeland.com/meta/contract/winzers"
  ],
  "numDeployments": 1,
  "solcInputHash": "e3d9904c6db4e87a0b2798b995091235",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fatherReceiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_initBaseURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_initContractURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"race\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skin\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"head\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ears\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hair\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"beard\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mouth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyebrows\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"nose\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scars\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct WinzerERC721.DNA1\",\"name\":\"_dna\",\"type\":\"tuple\"}],\"name\":\"Dna1Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"father\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mother\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"accessory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"makeup\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill3\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill4\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill5\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct WinzerERC721.DNA2\",\"name\":\"_dna\",\"type\":\"tuple\"}],\"name\":\"Dna2Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"ProxyRegistryAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dna1\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"race\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skin\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"head\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ears\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hair\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"beard\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mouth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyebrows\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"nose\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scars\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dna2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"father\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mother\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"accessory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"makeup\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill3\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill4\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill5\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"race\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sex\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skin\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"head\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"ears\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hair\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"beard\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mouth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyebrows\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"nose\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"scars\",\"type\":\"uint8\"}],\"internalType\":\"struct WinzerERC721.DNA1\",\"name\":\"_dna1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"father\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mother\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"accessory\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"makeup\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill1\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill2\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill3\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill4\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"skill5\",\"type\":\"uint8\"}],\"internalType\":\"struct WinzerERC721.DNA2\",\"name\":\"_dna2\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForAll(address,address)\":{\"notice\":\"Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/winzers/WinzerERC721.sol\":\"WinzerERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/ERC721Tradable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\n\\ncontract OwnableDelegateProxy {}\\n\\n/**\\n * Used to delegate ownership of a contract to another address, to save on unneeded transactions to approve contract use for users\\n */\\ncontract ProxyRegistry {\\n    mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\\n/**\\n * @title ERC721Tradable\\n * ERC721Tradable - ERC721 contract that whitelists a trading address\\n */\\nabstract contract ERC721Tradable is ERC721Enumerable, AccessControlEnumerable {\\n    address public proxyRegistryAddress;\\n\\n    event ProxyRegistryAddressChanged(address indexed _newAddress);\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC721(_name, _symbol) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    }\\n\\n    /**\\n     * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\\n     */\\n    function isApprovedForAll(address _owner, address _operator)\\n        override\\n        public\\n        view\\n        returns (bool)\\n    {\\n        // Whitelist OpenSea proxy contract for easy trading.\\n        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n        if (address(proxyRegistry.proxies(_owner)) == _operator) {\\n            return true;\\n        }\\n\\n        return super.isApprovedForAll(_owner, _operator);\\n    }\\n\\n    function setProxyRegistryAddress(address _proxyRegistryAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        proxyRegistryAddress = _proxyRegistryAddress;\\n        emit ProxyRegistryAddressChanged(_proxyRegistryAddress);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Enumerable, AccessControlEnumerable) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId\\n         || interfaceId == type(IAccessControlEnumerable).interfaceId\\n         || super.supportsInterface(interfaceId);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return getRoleMember(DEFAULT_ADMIN_ROLE, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x5f35b031a8b7810fafe541238da269c61c6700d9863d12116d6ad254b847ba7a\",\"license\":\"MIT\"},\"contracts/winzers/WinzerERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../ERC721Tradable.sol\\\";\\n\\ncontract WinzerERC721 is ERC721Tradable {\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    struct DNA1 {\\n        uint8 race;\\n        uint8 sex;\\n        uint8 skin;\\n        uint8 head;\\n        uint8 ears;\\n        uint8 hair;\\n        uint8 beard;\\n        uint8 mouth;\\n        uint8 eyes;\\n        uint8 eyebrows;\\n        uint8 nose;\\n        uint8 scars;\\n    }\\n\\n    struct DNA2 {\\n        uint256 father;\\n        uint256 mother;\\n        uint8 accessory;\\n        uint8 makeup;\\n        uint8 skill1;\\n        uint8 skill2;\\n        uint8 skill3;\\n        uint8 skill4;\\n        uint8 skill5;\\n    }\\n\\n    event Dna1Updated(uint256 indexed _tokenId, DNA1 _dna);\\n    event Dna2Updated(uint256 indexed _tokenId, DNA2 _dna);\\n\\n    mapping(uint256 => DNA1) public dna1;\\n    mapping(uint256 => DNA2) public dna2;\\n\\n    string private __baseURI;\\n    string private __contractURI;\\n\\n    constructor(address _fatherReceiver, string memory _initBaseURI, string memory _initContractURI) ERC721Tradable(\\\"Winzeland: Winzer\\\", \\\"Winzer\\\") {\\n        __baseURI = _initBaseURI;\\n        __contractURI = _initContractURI;\\n        // minting \\\"AllFather\\\" as first winzer with all zero traits.\\n        DNA1 memory _dna1;\\n        DNA2 memory _dna2;\\n        _mint(_fatherReceiver, 0);\\n        _setDna1(0, _dna1);\\n        _setExtraDna(0, _dna2);\\n    }\\n\\n    function mint(address player, DNA1 memory _dna1, DNA2 memory _dna2)\\n        public onlyRole(MINTER_ROLE)\\n        returns (uint256) \\n    {\\n        uint256 newItemId = totalSupply();\\n        _mint(player, newItemId);\\n\\n        _setDna1(newItemId, _dna1);\\n        _setExtraDna(newItemId, _dna2);\\n\\n        return newItemId;\\n    }\\n\\n    function _setDna1(uint256 _tokenId, DNA1 memory _dna) internal {\\n        dna1[_tokenId] = _dna;\\n        emit Dna1Updated(_tokenId, _dna);\\n    }\\n\\n    function _setExtraDna(uint256 _tokenId, DNA2 memory _dna) internal {\\n        dna2[_tokenId] = _dna;\\n        emit Dna2Updated(_tokenId, _dna);\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return __baseURI;\\n    }\\n\\n    function setBaseUri(string memory uri) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        __baseURI = uri;\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return __contractURI;\\n    }\\n\\n    function setContractURI(string memory uri) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        __contractURI = uri;\\n    }\\n}\\n\",\"keccak256\":\"0x747cad54720d5d1b994d94caadddd79707c0c07d4a7cf4ad0d20db6b5a216608\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162006ad838038062006ad8833981810160405281019062000037919062001182565b6040518060400160405280601181526020017f57696e7a656c616e643a2057696e7a65720000000000000000000000000000008152506040518060400160405280600681526020017f57696e7a6572000000000000000000000000000000000000000000000000000081525081818160009080519060200190620000bd92919062000f63565b508060019080519060200190620000d692919062000f63565b505050620000fd6000801b620000f16200018960201b60201c565b6200019160201b60201c565b505081600f90805190602001906200011792919062000f63565b5080601090805190602001906200013092919062000f63565b506200013b62000ff4565b6200014562001079565b62000158856000620001a760201b60201c565b6200016b600083620003a160201b60201c565b6200017e6000826200058660201b60201c565b505050505062001868565b600033905090565b620001a38282620006d760201b60201c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200021a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200021190620014bc565b60405180910390fd5b6200022b816200071f60201b60201c565b156200026e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002659062001478565b60405180910390fd5b62000282600083836200078b60201b60201c565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254620002d491906200158a565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46200039d60008383620008d260201b60201c565b5050565b80600d600084815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555060608201518160000160036101000a81548160ff021916908360ff16021790555060808201518160000160046101000a81548160ff021916908360ff16021790555060a08201518160000160056101000a81548160ff021916908360ff16021790555060c08201518160000160066101000a81548160ff021916908360ff16021790555060e08201518160000160076101000a81548160ff021916908360ff1602179055506101008201518160000160086101000a81548160ff021916908360ff1602179055506101208201518160000160096101000a81548160ff021916908360ff16021790555061014082015181600001600a6101000a81548160ff021916908360ff16021790555061016082015181600001600b6101000a81548160ff021916908360ff160217905550905050817f1a6e49c439dfb32aa6284482bc7a238ce805706dd9b685516123c05e947e7ea3826040516200057a9190620014de565b60405180910390a25050565b80600e6000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160020160026101000a81548160ff021916908360ff16021790555060a08201518160020160036101000a81548160ff021916908360ff16021790555060c08201518160020160046101000a81548160ff021916908360ff16021790555060e08201518160020160056101000a81548160ff021916908360ff1602179055506101008201518160020160066101000a81548160ff021916908360ff160217905550905050817f2036cd788031480791614b2f778f4b472e1a16a7802e76f095f1d00ae4a2be7f82604051620006cb9190620014fc565b60405180910390a25050565b620006ee8282620008d760201b620015c01760201c565b6200071a81600b6000858152602001908152602001600020620009c960201b620016a11790919060201c565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b620007a383838362000a0160201b620016d11760201c565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415620007f057620007ea8162000a0660201b60201c565b62000838565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614620008375762000836838262000a4f60201b60201c565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000885576200087f8162000bcc60201b60201c565b620008cd565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614620008cc57620008cb828262000d1460201b60201c565b5b5b505050565b505050565b620008e9828262000da060201b60201c565b620009c5576001600a600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506200096a6200018960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000620009f9836000018373ffffffffffffffffffffffffffffffffffffffff1660001b62000e0b60201b60201c565b905092915050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600162000a698462000e8560201b62000d6a1760201c565b62000a759190620015e7565b905060006007600084815260200190815260200160002054905081811462000b5b576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905062000be29190620015e7565b905060006009600084815260200190815260200160002054905060006008838154811062000c39577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050806008838154811062000c82577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508160096000838152602001908152602001600020819055506009600085815260200190815260200160002060009055600880548062000cf8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600062000d2c8362000e8560201b62000d6a1760201c565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b6000600a600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600062000e1f838362000f4060201b60201c565b62000e7a57826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000e7f565b600090505b92915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000ef9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000ef0906200149a565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080836001016000848152602001908152602001600020541415905092915050565b82805462000f7190620016a3565b90600052602060002090601f01602090048101928262000f95576000855562000fe1565b82601f1062000fb057805160ff191683800117855562000fe1565b8280016001018555821562000fe1579182015b8281111562000fe057825182559160200191906001019062000fc3565b5b50905062000ff09190620010da565b5090565b604051806101800160405280600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff1681525090565b6040518061012001604052806000815260200160008152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff1681525090565b5b80821115620010f5576000816000905550600101620010db565b5090565b6000620011106200110a8462001543565b6200151a565b9050828152602081018484840111156200112957600080fd5b620011368482856200166d565b509392505050565b6000815190506200114f816200184e565b92915050565b600082601f8301126200116757600080fd5b815162001179848260208601620010f9565b91505092915050565b6000806000606084860312156200119857600080fd5b6000620011a8868287016200113e565b935050602084015167ffffffffffffffff811115620011c657600080fd5b620011d48682870162001155565b925050604084015167ffffffffffffffff811115620011f257600080fd5b620012008682870162001155565b9150509250925092565b600062001219601c8362001579565b91506200122682620017ad565b602082019050919050565b600062001240602a8362001579565b91506200124d82620017d6565b604082019050919050565b60006200126760208362001579565b9150620012748262001825565b602082019050919050565b6101808201600082015162001298600085018262001467565b506020820151620012ad602085018262001467565b506040820151620012c2604085018262001467565b506060820151620012d7606085018262001467565b506080820151620012ec608085018262001467565b5060a08201516200130160a085018262001467565b5060c08201516200131660c085018262001467565b5060e08201516200132b60e085018262001467565b506101008201516200134261010085018262001467565b506101208201516200135961012085018262001467565b506101408201516200137061014085018262001467565b506101608201516200138761016085018262001467565b50505050565b61012082016000820151620013a6600085018262001456565b506020820151620013bb602085018262001456565b506040820151620013d0604085018262001467565b506060820151620013e5606085018262001467565b506080820151620013fa608085018262001467565b5060a08201516200140f60a085018262001467565b5060c08201516200142460c085018262001467565b5060e08201516200143960e085018262001467565b506101008201516200145061010085018262001467565b50505050565b620014618162001656565b82525050565b620014728162001660565b82525050565b6000602082019050818103600083015262001493816200120a565b9050919050565b60006020820190508181036000830152620014b58162001231565b9050919050565b60006020820190508181036000830152620014d78162001258565b9050919050565b600061018082019050620014f660008301846200127f565b92915050565b6000610120820190506200151460008301846200138d565b92915050565b60006200152662001539565b9050620015348282620016d9565b919050565b6000604051905090565b600067ffffffffffffffff8211156200156157620015606200176d565b5b6200156c826200179c565b9050602081019050919050565b600082825260208201905092915050565b6000620015978262001656565b9150620015a48362001656565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620015dc57620015db6200170f565b5b828201905092915050565b6000620015f48262001656565b9150620016018362001656565b9250828210156200161757620016166200170f565b5b828203905092915050565b60006200162f8262001636565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156200168d57808201518184015260208101905062001670565b838111156200169d576000848401525b50505050565b60006002820490506001821680620016bc57607f821691505b60208210811415620016d357620016d26200173e565b5b50919050565b620016e4826200179c565b810181811067ffffffffffffffff821117156200170657620017056200176d565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b620018598162001622565b81146200186557600080fd5b50565b61526080620018786000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c806391d148541161011a578063c87b56dd116100ad578063d53913931161007c578063d53913931461064f578063d547741f1461066d578063e8a3d48514610689578063e985e9c5146106a7578063f4ee47ac146106d757610206565b8063c87b56dd146105b5578063ca15c873146105e5578063cd7c032614610615578063d26ea6c01461063357610206565b8063a217fddf116100e9578063a217fddf1461052f578063a22cb4651461054d578063b88d4fde14610569578063c49d183b1461058557610206565b806391d14854146104a9578063938e3d7b146104d957806395d89b41146104f5578063a0bcfc7f1461051357610206565b80632f745c591161019d5780636352211e1161016c5780636352211e146103c357806370a08231146103f35780637c557a0f146104235780638da5cb5b1461045b5780639010d07c1461047957610206565b80632f745c591461032b57806336568abe1461035b57806342842e0e146103775780634f6ccce71461039357610206565b806318160ddd116101d957806318160ddd146102a557806323b872dd146102c3578063248a9ca3146102df5780632f2ff15d1461030f57610206565b806301ffc9a71461020b57806306fdde031461023b578063081812fc14610259578063095ea7b314610289575b600080fd5b61022560048036038101906102209190613c5e565b610712565b604051610232919061437d565b60405180910390f35b6102436107f4565b60405161025091906143b3565b60405180910390f35b610273600480360381019061026e9190613d1a565b610886565b6040516102809190614316565b60405180910390f35b6102a3600480360381019061029e9190613b81565b61090b565b005b6102ad610a23565b6040516102ba919061464d565b60405180910390f35b6102dd60048036038101906102d89190613a2a565b610a30565b005b6102f960048036038101906102f49190613bbd565b610a90565b6040516103069190614398565b60405180910390f35b61032960048036038101906103249190613be6565b610ab0565b005b61034560048036038101906103409190613b81565b610ad9565b604051610352919061464d565b60405180910390f35b61037560048036038101906103709190613be6565b610b7e565b005b610391600480360381019061038c9190613a2a565b610c01565b005b6103ad60048036038101906103a89190613d1a565b610c21565b6040516103ba919061464d565b60405180910390f35b6103dd60048036038101906103d89190613d1a565b610cb8565b6040516103ea9190614316565b60405180910390f35b61040d600480360381019061040891906139c5565b610d6a565b60405161041a919061464d565b60405180910390f35b61043d60048036038101906104389190613d1a565b610e22565b60405161045299989796959493929190614668565b60405180910390f35b610463610ecb565b6040516104709190614316565b60405180910390f35b610493600480360381019061048e9190613c22565b610ee0565b6040516104a09190614316565b60405180910390f35b6104c360048036038101906104be9190613be6565b610f0f565b6040516104d0919061437d565b60405180910390f35b6104f360048036038101906104ee9190613cd9565b610f7a565b005b6104fd610faa565b60405161050a91906143b3565b60405180910390f35b61052d60048036038101906105289190613cd9565b61103c565b005b61053761106c565b6040516105449190614398565b60405180910390f35b61056760048036038101906105629190613af4565b611073565b005b610583600480360381019061057e9190613a79565b611089565b005b61059f600480360381019061059a9190613b30565b6110eb565b6040516105ac919061464d565b60405180910390f35b6105cf60048036038101906105ca9190613d1a565b611155565b6040516105dc91906143b3565b60405180910390f35b6105ff60048036038101906105fa9190613bbd565b6111fc565b60405161060c919061464d565b60405180910390f35b61061d611220565b60405161062a9190614316565b60405180910390f35b61064d600480360381019061064891906139c5565b611246565b005b6106576112e3565b6040516106649190614398565b60405180910390f35b61068760048036038101906106829190613be6565b611307565b005b610691611330565b60405161069e91906143b3565b60405180910390f35b6106c160048036038101906106bc91906139ee565b6113c2565b6040516106ce919061437d565b60405180910390f35b6106f160048036038101906106ec9190613d1a565b6114c4565b6040516107099c9b9a999897969594939291906146f5565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107dd57507f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107ed57506107ec826116d6565b5b9050919050565b60606000805461080390614a97565b80601f016020809104026020016040519081016040528092919081815260200182805461082f90614a97565b801561087c5780601f106108515761010080835404028352916020019161087c565b820191906000526020600020905b81548152906001019060200180831161085f57829003601f168201915b5050505050905090565b600061089182611750565b6108d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c790614555565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061091682610cb8565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097e90614595565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109a66117bc565b73ffffffffffffffffffffffffffffffffffffffff1614806109d557506109d4816109cf6117bc565b6113c2565b5b610a14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0b906144d5565b60405180910390fd5b610a1e83836117c4565b505050565b6000600880549050905090565b610a41610a3b6117bc565b8261187d565b610a80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a77906145b5565b60405180910390fd5b610a8b83838361195b565b505050565b6000600a6000838152602001908152602001600020600101549050919050565b610ab982610a90565b610aca81610ac56117bc565b611bc2565b610ad48383611c5f565b505050565b6000610ae483610d6a565b8210610b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1c906143f5565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610b866117bc565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bea906145f5565b60405180910390fd5b610bfd8282611c93565b5050565b610c1c83838360405180602001604052806000815250611089565b505050565b6000610c2b610a23565b8210610c6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c63906145d5565b60405180910390fd5b60088281548110610ca6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5890614515565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd2906144f5565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600e6020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900460ff16908060020160019054906101000a900460ff16908060020160029054906101000a900460ff16908060020160039054906101000a900460ff16908060020160049054906101000a900460ff16908060020160059054906101000a900460ff16908060020160069054906101000a900460ff16905089565b6000610edb6000801b6000610ee0565b905090565b6000610f0782600b6000868152602001908152602001600020611cc790919063ffffffff16565b905092915050565b6000600a600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b610f8f81610f8a6117bc565b611bc2565b8160109080519060200190610fa59291906135b0565b505050565b606060018054610fb990614a97565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe590614a97565b80156110325780601f1061100757610100808354040283529160200191611032565b820191906000526020600020905b81548152906001019060200180831161101557829003601f168201915b5050505050905090565b6000801b6110518161104c6117bc565b611bc2565b81600f90805190602001906110679291906135b0565b505050565b6000801b81565b61108561107e6117bc565b8383611ce1565b5050565b61109a6110946117bc565b8361187d565b6110d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d0906145b5565b60405180910390fd5b6110e584848484611e4e565b50505050565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661111f8161111a6117bc565b611bc2565b6000611129610a23565b90506111358682611eaa565b61113f8186612084565b6111498185612267565b80925050509392505050565b606061116082611750565b61119f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119690614575565b60405180910390fd5b60006111a96123b6565b905060008151116111c957604051806020016040528060008152506111f4565b806111d384612448565b6040516020016111e49291906142b8565b6040516020818303038152906040525b915050919050565b6000611219600b60008481526020019081526020016000206125f5565b9050919050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b61125b816112566117bc565b611bc2565b81600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167fa2b0839d4585de7874ef6ce1d56318647d0ba0f8661e7ae4b76c47a7d5766b5360405160405180910390a25050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61131082610a90565b6113218161131c6117bc565b611bc2565b61132b8383611c93565b505050565b60606010805461133f90614a97565b80601f016020809104026020016040519081016040528092919081815260200182805461136b90614a97565b80156113b85780601f1061138d576101008083540402835291602001916113b8565b820191906000526020600020905b81548152906001019060200180831161139b57829003601f168201915b5050505050905090565b600080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663c4552791866040518263ffffffff1660e01b815260040161143a9190614316565b60206040518083038186803b15801561145257600080fd5b505afa158015611466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148a9190613cb0565b73ffffffffffffffffffffffffffffffffffffffff1614156114b05760019150506114be565b6114ba848461260a565b9150505b92915050565b600d6020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a900460ff16908060000160039054906101000a900460ff16908060000160049054906101000a900460ff16908060000160059054906101000a900460ff16908060000160069054906101000a900460ff16908060000160079054906101000a900460ff16908060000160089054906101000a900460ff16908060000160099054906101000a900460ff169080600001600a9054906101000a900460ff169080600001600b9054906101000a900460ff1690508c565b6115ca8282610f0f565b61169d576001600a600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506116426117bc565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006116c9836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61269e565b905092915050565b505050565b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061174957506117488261270e565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661183783610cb8565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061188882611750565b6118c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118be906144b5565b60405180910390fd5b60006118d283610cb8565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061194157508373ffffffffffffffffffffffffffffffffffffffff1661192984610886565b73ffffffffffffffffffffffffffffffffffffffff16145b80611952575061195181856113c2565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661197b82610cb8565b73ffffffffffffffffffffffffffffffffffffffff16146119d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c890614435565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3890614475565b60405180910390fd5b611a4c838383612788565b611a576000826117c4565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611aa7919061495a565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611afe9190614879565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611bbd83838361289c565b505050565b611bcc8282610f0f565b611c5b57611bf18173ffffffffffffffffffffffffffffffffffffffff1660146128a1565b611bff8360001c60206128a1565b604051602001611c109291906142dc565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5291906143b3565b60405180910390fd5b5050565b611c6982826115c0565b611c8e81600b60008581526020019081526020016000206116a190919063ffffffff16565b505050565b611c9d8282612b9b565b611cc281600b6000858152602001908152602001600020612c7d90919063ffffffff16565b505050565b6000611cd68360000183612cad565b60001c905092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611d50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4790614495565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611e41919061437d565b60405180910390a3505050565b611e5984848461195b565b611e6584848484612cfe565b611ea4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9b90614415565b60405180910390fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1190614535565b60405180910390fd5b611f2381611750565b15611f63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5a90614455565b60405180910390fd5b611f6f60008383612788565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fbf9190614879565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46120806000838361289c565b5050565b80600d600084815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555060608201518160000160036101000a81548160ff021916908360ff16021790555060808201518160000160046101000a81548160ff021916908360ff16021790555060a08201518160000160056101000a81548160ff021916908360ff16021790555060c08201518160000160066101000a81548160ff021916908360ff16021790555060e08201518160000160076101000a81548160ff021916908360ff1602179055506101008201518160000160086101000a81548160ff021916908360ff1602179055506101208201518160000160096101000a81548160ff021916908360ff16021790555061014082015181600001600a6101000a81548160ff021916908360ff16021790555061016082015181600001600b6101000a81548160ff021916908360ff160217905550905050817f1a6e49c439dfb32aa6284482bc7a238ce805706dd9b685516123c05e947e7ea38260405161225b9190614615565b60405180910390a25050565b80600e6000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160020160026101000a81548160ff021916908360ff16021790555060a08201518160020160036101000a81548160ff021916908360ff16021790555060c08201518160020160046101000a81548160ff021916908360ff16021790555060e08201518160020160056101000a81548160ff021916908360ff1602179055506101008201518160020160066101000a81548160ff021916908360ff160217905550905050817f2036cd788031480791614b2f778f4b472e1a16a7802e76f095f1d00ae4a2be7f826040516123aa9190614631565b60405180910390a25050565b6060600f80546123c590614a97565b80601f01602080910402602001604051908101604052809291908181526020018280546123f190614a97565b801561243e5780601f106124135761010080835404028352916020019161243e565b820191906000526020600020905b81548152906001019060200180831161242157829003601f168201915b5050505050905090565b60606000821415612490576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506125f0565b600082905060005b600082146124c25780806124ab90614afa565b915050600a826124bb91906148cf565b9150612498565b60008167ffffffffffffffff811115612504577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156125365781602001600182028036833780820191505090505b5090505b600085146125e95760018261254f919061495a565b9150600a8561255e9190614b43565b603061256a9190614879565b60f81b8183815181106125a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856125e291906148cf565b945061253a565b8093505050505b919050565b600061260382600001612e95565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006126aa8383612ea6565b612703578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612708565b600090505b92915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612781575061278082612ec9565b5b9050919050565b6127938383836116d1565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156127d6576127d181612f43565b612815565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612814576128138382612f8c565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561285857612853816130f9565b612897565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461289657612895828261323c565b5b5b505050565b505050565b6060600060028360026128b49190614900565b6128be9190614879565b67ffffffffffffffff8111156128fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561292f5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061298d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612a17577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612a579190614900565b612a619190614879565b90505b6001811115612b4d577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612ac9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612b06577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612b4690614a6d565b9050612a64565b5060008414612b91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b88906143d5565b60405180910390fd5b8091505092915050565b612ba58282610f0f565b15612c79576000600a600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612c1e6117bc565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000612ca5836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6132bb565b905092915050565b6000826000018281548110612ceb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b6000612d1f8473ffffffffffffffffffffffffffffffffffffffff16613441565b15612e88578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612d486117bc565b8786866040518563ffffffff1660e01b8152600401612d6a9493929190614331565b602060405180830381600087803b158015612d8457600080fd5b505af1925050508015612db557506040513d601f19601f82011682018060405250810190612db29190613c87565b60015b612e38573d8060008114612de5576040519150601f19603f3d011682016040523d82523d6000602084013e612dea565b606091505b50600081511415612e30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e2790614415565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612e8d565b600190505b949350505050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612f3c5750612f3b82613464565b5b9050919050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001612f9984610d6a565b612fa3919061495a565b9050600060076000848152602001908152602001600020549050818114613088576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905061310d919061495a565b9050600060096000848152602001908152602001600020549050600060088381548110613163577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080600883815481106131ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480613220577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061324783610d6a565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600080836001016000848152602001908152602001600020549050600081146134355760006001826132ed919061495a565b9050600060018660000180549050613305919061495a565b90508181146133c057600086600001828154811061334c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110613396577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806133fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061343b565b60009150505b92915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061352f57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061353f575061353e82613546565b5b9050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b8280546135bc90614a97565b90600052602060002090601f0160209004810192826135de5760008555613625565b82601f106135f757805160ff1916838001178555613625565b82800160010185558215613625579182015b82811115613624578251825591602001919060010190613609565b5b5090506136329190613636565b5090565b5b8082111561364f576000816000905550600101613637565b5090565b6000613666613661846147d4565b6147af565b90508281526020810184848401111561367e57600080fd5b613689848285614a2b565b509392505050565b60006136a461369f84614805565b6147af565b9050828152602081018484840111156136bc57600080fd5b6136c7848285614a2b565b509392505050565b6000813590506136de81615189565b92915050565b6000813590506136f3816151a0565b92915050565b600081359050613708816151b7565b92915050565b60008135905061371d816151ce565b92915050565b600081519050613732816151ce565b92915050565b600082601f83011261374957600080fd5b8135613759848260208601613653565b91505092915050565b600081519050613771816151e5565b92915050565b600082601f83011261378857600080fd5b8135613798848260208601613691565b91505092915050565b600061018082840312156137b457600080fd5b6137bf6101806147af565b905060006137cf848285016139b0565b60008301525060206137e3848285016139b0565b60208301525060406137f7848285016139b0565b604083015250606061380b848285016139b0565b606083015250608061381f848285016139b0565b60808301525060a0613833848285016139b0565b60a08301525060c0613847848285016139b0565b60c08301525060e061385b848285016139b0565b60e083015250610100613870848285016139b0565b61010083015250610120613886848285016139b0565b6101208301525061014061389c848285016139b0565b610140830152506101606138b2848285016139b0565b6101608301525092915050565b600061012082840312156138d257600080fd5b6138dd6101206147af565b905060006138ed8482850161399b565b60008301525060206139018482850161399b565b6020830152506040613915848285016139b0565b6040830152506060613929848285016139b0565b606083015250608061393d848285016139b0565b60808301525060a0613951848285016139b0565b60a08301525060c0613965848285016139b0565b60c08301525060e0613979848285016139b0565b60e08301525061010061398e848285016139b0565b6101008301525092915050565b6000813590506139aa816151fc565b92915050565b6000813590506139bf81615213565b92915050565b6000602082840312156139d757600080fd5b60006139e5848285016136cf565b91505092915050565b60008060408385031215613a0157600080fd5b6000613a0f858286016136cf565b9250506020613a20858286016136cf565b9150509250929050565b600080600060608486031215613a3f57600080fd5b6000613a4d868287016136cf565b9350506020613a5e868287016136cf565b9250506040613a6f8682870161399b565b9150509250925092565b60008060008060808587031215613a8f57600080fd5b6000613a9d878288016136cf565b9450506020613aae878288016136cf565b9350506040613abf8782880161399b565b925050606085013567ffffffffffffffff811115613adc57600080fd5b613ae887828801613738565b91505092959194509250565b60008060408385031215613b0757600080fd5b6000613b15858286016136cf565b9250506020613b26858286016136e4565b9150509250929050565b60008060006102c08486031215613b4657600080fd5b6000613b54868287016136cf565b9350506020613b65868287016137a1565b9250506101a0613b77868287016138bf565b9150509250925092565b60008060408385031215613b9457600080fd5b6000613ba2858286016136cf565b9250506020613bb38582860161399b565b9150509250929050565b600060208284031215613bcf57600080fd5b6000613bdd848285016136f9565b91505092915050565b60008060408385031215613bf957600080fd5b6000613c07858286016136f9565b9250506020613c18858286016136cf565b9150509250929050565b60008060408385031215613c3557600080fd5b6000613c43858286016136f9565b9250506020613c548582860161399b565b9150509250929050565b600060208284031215613c7057600080fd5b6000613c7e8482850161370e565b91505092915050565b600060208284031215613c9957600080fd5b6000613ca784828501613723565b91505092915050565b600060208284031215613cc257600080fd5b6000613cd084828501613762565b91505092915050565b600060208284031215613ceb57600080fd5b600082013567ffffffffffffffff811115613d0557600080fd5b613d1184828501613777565b91505092915050565b600060208284031215613d2c57600080fd5b6000613d3a8482850161399b565b91505092915050565b613d4c8161498e565b82525050565b613d5b816149a0565b82525050565b613d6a816149ac565b82525050565b6000613d7b82614836565b613d85818561484c565b9350613d95818560208601614a3a565b613d9e81614c30565b840191505092915050565b6000613db482614841565b613dbe818561485d565b9350613dce818560208601614a3a565b613dd781614c30565b840191505092915050565b6000613ded82614841565b613df7818561486e565b9350613e07818560208601614a3a565b80840191505092915050565b6000613e2060208361485d565b9150613e2b82614c41565b602082019050919050565b6000613e43602b8361485d565b9150613e4e82614c6a565b604082019050919050565b6000613e6660328361485d565b9150613e7182614cb9565b604082019050919050565b6000613e8960258361485d565b9150613e9482614d08565b604082019050919050565b6000613eac601c8361485d565b9150613eb782614d57565b602082019050919050565b6000613ecf60248361485d565b9150613eda82614d80565b604082019050919050565b6000613ef260198361485d565b9150613efd82614dcf565b602082019050919050565b6000613f15602c8361485d565b9150613f2082614df8565b604082019050919050565b6000613f3860388361485d565b9150613f4382614e47565b604082019050919050565b6000613f5b602a8361485d565b9150613f6682614e96565b604082019050919050565b6000613f7e60298361485d565b9150613f8982614ee5565b604082019050919050565b6000613fa160208361485d565b9150613fac82614f34565b602082019050919050565b6000613fc4602c8361485d565b9150613fcf82614f5d565b604082019050919050565b6000613fe7602f8361485d565b9150613ff282614fac565b604082019050919050565b600061400a60218361485d565b915061401582614ffb565b604082019050919050565b600061402d60318361485d565b91506140388261504a565b604082019050919050565b6000614050602c8361485d565b915061405b82615099565b604082019050919050565b600061407360178361486e565b915061407e826150e8565b601782019050919050565b600061409660118361486e565b91506140a182615111565b601182019050919050565b60006140b9602f8361485d565b91506140c48261513a565b604082019050919050565b610180820160008201516140e6600085018261429a565b5060208201516140f9602085018261429a565b50604082015161410c604085018261429a565b50606082015161411f606085018261429a565b506080820151614132608085018261429a565b5060a082015161414560a085018261429a565b5060c082015161415860c085018261429a565b5060e082015161416b60e085018261429a565b5061010082015161418061010085018261429a565b5061012082015161419561012085018261429a565b506101408201516141aa61014085018261429a565b506101608201516141bf61016085018261429a565b50505050565b610120820160008201516141dc600085018261427c565b5060208201516141ef602085018261427c565b506040820151614202604085018261429a565b506060820151614215606085018261429a565b506080820151614228608085018261429a565b5060a082015161423b60a085018261429a565b5060c082015161424e60c085018261429a565b5060e082015161426160e085018261429a565b5061010082015161427661010085018261429a565b50505050565b61428581614a14565b82525050565b61429481614a14565b82525050565b6142a381614a1e565b82525050565b6142b281614a1e565b82525050565b60006142c48285613de2565b91506142d08284613de2565b91508190509392505050565b60006142e782614066565b91506142f38285613de2565b91506142fe82614089565b915061430a8284613de2565b91508190509392505050565b600060208201905061432b6000830184613d43565b92915050565b60006080820190506143466000830187613d43565b6143536020830186613d43565b614360604083018561428b565b81810360608301526143728184613d70565b905095945050505050565b60006020820190506143926000830184613d52565b92915050565b60006020820190506143ad6000830184613d61565b92915050565b600060208201905081810360008301526143cd8184613da9565b905092915050565b600060208201905081810360008301526143ee81613e13565b9050919050565b6000602082019050818103600083015261440e81613e36565b9050919050565b6000602082019050818103600083015261442e81613e59565b9050919050565b6000602082019050818103600083015261444e81613e7c565b9050919050565b6000602082019050818103600083015261446e81613e9f565b9050919050565b6000602082019050818103600083015261448e81613ec2565b9050919050565b600060208201905081810360008301526144ae81613ee5565b9050919050565b600060208201905081810360008301526144ce81613f08565b9050919050565b600060208201905081810360008301526144ee81613f2b565b9050919050565b6000602082019050818103600083015261450e81613f4e565b9050919050565b6000602082019050818103600083015261452e81613f71565b9050919050565b6000602082019050818103600083015261454e81613f94565b9050919050565b6000602082019050818103600083015261456e81613fb7565b9050919050565b6000602082019050818103600083015261458e81613fda565b9050919050565b600060208201905081810360008301526145ae81613ffd565b9050919050565b600060208201905081810360008301526145ce81614020565b9050919050565b600060208201905081810360008301526145ee81614043565b9050919050565b6000602082019050818103600083015261460e816140ac565b9050919050565b60006101808201905061462b60008301846140cf565b92915050565b60006101208201905061464760008301846141c5565b92915050565b6000602082019050614662600083018461428b565b92915050565b60006101208201905061467e600083018c61428b565b61468b602083018b61428b565b614698604083018a6142a9565b6146a560608301896142a9565b6146b260808301886142a9565b6146bf60a08301876142a9565b6146cc60c08301866142a9565b6146d960e08301856142a9565b6146e76101008301846142a9565b9a9950505050505050505050565b60006101808201905061470b600083018f6142a9565b614718602083018e6142a9565b614725604083018d6142a9565b614732606083018c6142a9565b61473f608083018b6142a9565b61474c60a083018a6142a9565b61475960c08301896142a9565b61476660e08301886142a9565b6147746101008301876142a9565b6147826101208301866142a9565b6147906101408301856142a9565b61479e6101608301846142a9565b9d9c50505050505050505050505050565b60006147b96147ca565b90506147c58282614ac9565b919050565b6000604051905090565b600067ffffffffffffffff8211156147ef576147ee614c01565b5b6147f882614c30565b9050602081019050919050565b600067ffffffffffffffff8211156148205761481f614c01565b5b61482982614c30565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061488482614a14565b915061488f83614a14565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156148c4576148c3614b74565b5b828201905092915050565b60006148da82614a14565b91506148e583614a14565b9250826148f5576148f4614ba3565b5b828204905092915050565b600061490b82614a14565b915061491683614a14565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561494f5761494e614b74565b5b828202905092915050565b600061496582614a14565b915061497083614a14565b92508282101561498357614982614b74565b5b828203905092915050565b6000614999826149f4565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006149ed8261498e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614a58578082015181840152602081019050614a3d565b83811115614a67576000848401525b50505050565b6000614a7882614a14565b91506000821415614a8c57614a8b614b74565b5b600182039050919050565b60006002820490506001821680614aaf57607f821691505b60208210811415614ac357614ac2614bd2565b5b50919050565b614ad282614c30565b810181811067ffffffffffffffff82111715614af157614af0614c01565b5b80604052505050565b6000614b0582614a14565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614b3857614b37614b74565b5b600182019050919050565b6000614b4e82614a14565b9150614b5983614a14565b925082614b6957614b68614ba3565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6151928161498e565b811461519d57600080fd5b50565b6151a9816149a0565b81146151b457600080fd5b50565b6151c0816149ac565b81146151cb57600080fd5b50565b6151d7816149b6565b81146151e257600080fd5b50565b6151ee816149e2565b81146151f957600080fd5b50565b61520581614a14565b811461521057600080fd5b50565b61521c81614a1e565b811461522757600080fd5b5056fea264697066735822122084895699c26425ac28364a60a4d131bb69d732ed94154ab23312c91a5ea7e94964736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c806391d148541161011a578063c87b56dd116100ad578063d53913931161007c578063d53913931461064f578063d547741f1461066d578063e8a3d48514610689578063e985e9c5146106a7578063f4ee47ac146106d757610206565b8063c87b56dd146105b5578063ca15c873146105e5578063cd7c032614610615578063d26ea6c01461063357610206565b8063a217fddf116100e9578063a217fddf1461052f578063a22cb4651461054d578063b88d4fde14610569578063c49d183b1461058557610206565b806391d14854146104a9578063938e3d7b146104d957806395d89b41146104f5578063a0bcfc7f1461051357610206565b80632f745c591161019d5780636352211e1161016c5780636352211e146103c357806370a08231146103f35780637c557a0f146104235780638da5cb5b1461045b5780639010d07c1461047957610206565b80632f745c591461032b57806336568abe1461035b57806342842e0e146103775780634f6ccce71461039357610206565b806318160ddd116101d957806318160ddd146102a557806323b872dd146102c3578063248a9ca3146102df5780632f2ff15d1461030f57610206565b806301ffc9a71461020b57806306fdde031461023b578063081812fc14610259578063095ea7b314610289575b600080fd5b61022560048036038101906102209190613c5e565b610712565b604051610232919061437d565b60405180910390f35b6102436107f4565b60405161025091906143b3565b60405180910390f35b610273600480360381019061026e9190613d1a565b610886565b6040516102809190614316565b60405180910390f35b6102a3600480360381019061029e9190613b81565b61090b565b005b6102ad610a23565b6040516102ba919061464d565b60405180910390f35b6102dd60048036038101906102d89190613a2a565b610a30565b005b6102f960048036038101906102f49190613bbd565b610a90565b6040516103069190614398565b60405180910390f35b61032960048036038101906103249190613be6565b610ab0565b005b61034560048036038101906103409190613b81565b610ad9565b604051610352919061464d565b60405180910390f35b61037560048036038101906103709190613be6565b610b7e565b005b610391600480360381019061038c9190613a2a565b610c01565b005b6103ad60048036038101906103a89190613d1a565b610c21565b6040516103ba919061464d565b60405180910390f35b6103dd60048036038101906103d89190613d1a565b610cb8565b6040516103ea9190614316565b60405180910390f35b61040d600480360381019061040891906139c5565b610d6a565b60405161041a919061464d565b60405180910390f35b61043d60048036038101906104389190613d1a565b610e22565b60405161045299989796959493929190614668565b60405180910390f35b610463610ecb565b6040516104709190614316565b60405180910390f35b610493600480360381019061048e9190613c22565b610ee0565b6040516104a09190614316565b60405180910390f35b6104c360048036038101906104be9190613be6565b610f0f565b6040516104d0919061437d565b60405180910390f35b6104f360048036038101906104ee9190613cd9565b610f7a565b005b6104fd610faa565b60405161050a91906143b3565b60405180910390f35b61052d60048036038101906105289190613cd9565b61103c565b005b61053761106c565b6040516105449190614398565b60405180910390f35b61056760048036038101906105629190613af4565b611073565b005b610583600480360381019061057e9190613a79565b611089565b005b61059f600480360381019061059a9190613b30565b6110eb565b6040516105ac919061464d565b60405180910390f35b6105cf60048036038101906105ca9190613d1a565b611155565b6040516105dc91906143b3565b60405180910390f35b6105ff60048036038101906105fa9190613bbd565b6111fc565b60405161060c919061464d565b60405180910390f35b61061d611220565b60405161062a9190614316565b60405180910390f35b61064d600480360381019061064891906139c5565b611246565b005b6106576112e3565b6040516106649190614398565b60405180910390f35b61068760048036038101906106829190613be6565b611307565b005b610691611330565b60405161069e91906143b3565b60405180910390f35b6106c160048036038101906106bc91906139ee565b6113c2565b6040516106ce919061437d565b60405180910390f35b6106f160048036038101906106ec9190613d1a565b6114c4565b6040516107099c9b9a999897969594939291906146f5565b60405180910390f35b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107dd57507f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107ed57506107ec826116d6565b5b9050919050565b60606000805461080390614a97565b80601f016020809104026020016040519081016040528092919081815260200182805461082f90614a97565b801561087c5780601f106108515761010080835404028352916020019161087c565b820191906000526020600020905b81548152906001019060200180831161085f57829003601f168201915b5050505050905090565b600061089182611750565b6108d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c790614555565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061091682610cb8565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097e90614595565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166109a66117bc565b73ffffffffffffffffffffffffffffffffffffffff1614806109d557506109d4816109cf6117bc565b6113c2565b5b610a14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0b906144d5565b60405180910390fd5b610a1e83836117c4565b505050565b6000600880549050905090565b610a41610a3b6117bc565b8261187d565b610a80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a77906145b5565b60405180910390fd5b610a8b83838361195b565b505050565b6000600a6000838152602001908152602001600020600101549050919050565b610ab982610a90565b610aca81610ac56117bc565b611bc2565b610ad48383611c5f565b505050565b6000610ae483610d6a565b8210610b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1c906143f5565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610b866117bc565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bea906145f5565b60405180910390fd5b610bfd8282611c93565b5050565b610c1c83838360405180602001604052806000815250611089565b505050565b6000610c2b610a23565b8210610c6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c63906145d5565b60405180910390fd5b60088281548110610ca6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5890614515565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ddb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd2906144f5565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600e6020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900460ff16908060020160019054906101000a900460ff16908060020160029054906101000a900460ff16908060020160039054906101000a900460ff16908060020160049054906101000a900460ff16908060020160059054906101000a900460ff16908060020160069054906101000a900460ff16905089565b6000610edb6000801b6000610ee0565b905090565b6000610f0782600b6000868152602001908152602001600020611cc790919063ffffffff16565b905092915050565b6000600a600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000801b610f8f81610f8a6117bc565b611bc2565b8160109080519060200190610fa59291906135b0565b505050565b606060018054610fb990614a97565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe590614a97565b80156110325780601f1061100757610100808354040283529160200191611032565b820191906000526020600020905b81548152906001019060200180831161101557829003601f168201915b5050505050905090565b6000801b6110518161104c6117bc565b611bc2565b81600f90805190602001906110679291906135b0565b505050565b6000801b81565b61108561107e6117bc565b8383611ce1565b5050565b61109a6110946117bc565b8361187d565b6110d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d0906145b5565b60405180910390fd5b6110e584848484611e4e565b50505050565b60007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a661111f8161111a6117bc565b611bc2565b6000611129610a23565b90506111358682611eaa565b61113f8186612084565b6111498185612267565b80925050509392505050565b606061116082611750565b61119f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119690614575565b60405180910390fd5b60006111a96123b6565b905060008151116111c957604051806020016040528060008152506111f4565b806111d384612448565b6040516020016111e49291906142b8565b6040516020818303038152906040525b915050919050565b6000611219600b60008481526020019081526020016000206125f5565b9050919050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000801b61125b816112566117bc565b611bc2565b81600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167fa2b0839d4585de7874ef6ce1d56318647d0ba0f8661e7ae4b76c47a7d5766b5360405160405180910390a25050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61131082610a90565b6113218161131c6117bc565b611bc2565b61132b8383611c93565b505050565b60606010805461133f90614a97565b80601f016020809104026020016040519081016040528092919081815260200182805461136b90614a97565b80156113b85780601f1061138d576101008083540402835291602001916113b8565b820191906000526020600020905b81548152906001019060200180831161139b57829003601f168201915b5050505050905090565b600080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663c4552791866040518263ffffffff1660e01b815260040161143a9190614316565b60206040518083038186803b15801561145257600080fd5b505afa158015611466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148a9190613cb0565b73ffffffffffffffffffffffffffffffffffffffff1614156114b05760019150506114be565b6114ba848461260a565b9150505b92915050565b600d6020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16908060000160029054906101000a900460ff16908060000160039054906101000a900460ff16908060000160049054906101000a900460ff16908060000160059054906101000a900460ff16908060000160069054906101000a900460ff16908060000160079054906101000a900460ff16908060000160089054906101000a900460ff16908060000160099054906101000a900460ff169080600001600a9054906101000a900460ff169080600001600b9054906101000a900460ff1690508c565b6115ca8282610f0f565b61169d576001600a600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506116426117bc565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006116c9836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61269e565b905092915050565b505050565b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061174957506117488261270e565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661183783610cb8565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061188882611750565b6118c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118be906144b5565b60405180910390fd5b60006118d283610cb8565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061194157508373ffffffffffffffffffffffffffffffffffffffff1661192984610886565b73ffffffffffffffffffffffffffffffffffffffff16145b80611952575061195181856113c2565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661197b82610cb8565b73ffffffffffffffffffffffffffffffffffffffff16146119d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c890614435565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3890614475565b60405180910390fd5b611a4c838383612788565b611a576000826117c4565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611aa7919061495a565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611afe9190614879565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611bbd83838361289c565b505050565b611bcc8282610f0f565b611c5b57611bf18173ffffffffffffffffffffffffffffffffffffffff1660146128a1565b611bff8360001c60206128a1565b604051602001611c109291906142dc565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5291906143b3565b60405180910390fd5b5050565b611c6982826115c0565b611c8e81600b60008581526020019081526020016000206116a190919063ffffffff16565b505050565b611c9d8282612b9b565b611cc281600b6000858152602001908152602001600020612c7d90919063ffffffff16565b505050565b6000611cd68360000183612cad565b60001c905092915050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611d50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4790614495565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611e41919061437d565b60405180910390a3505050565b611e5984848461195b565b611e6584848484612cfe565b611ea4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9b90614415565b60405180910390fd5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1190614535565b60405180910390fd5b611f2381611750565b15611f63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5a90614455565b60405180910390fd5b611f6f60008383612788565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fbf9190614879565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46120806000838361289c565b5050565b80600d600084815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555060408201518160000160026101000a81548160ff021916908360ff16021790555060608201518160000160036101000a81548160ff021916908360ff16021790555060808201518160000160046101000a81548160ff021916908360ff16021790555060a08201518160000160056101000a81548160ff021916908360ff16021790555060c08201518160000160066101000a81548160ff021916908360ff16021790555060e08201518160000160076101000a81548160ff021916908360ff1602179055506101008201518160000160086101000a81548160ff021916908360ff1602179055506101208201518160000160096101000a81548160ff021916908360ff16021790555061014082015181600001600a6101000a81548160ff021916908360ff16021790555061016082015181600001600b6101000a81548160ff021916908360ff160217905550905050817f1a6e49c439dfb32aa6284482bc7a238ce805706dd9b685516123c05e947e7ea38260405161225b9190614615565b60405180910390a25050565b80600e6000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff021916908360ff16021790555060808201518160020160026101000a81548160ff021916908360ff16021790555060a08201518160020160036101000a81548160ff021916908360ff16021790555060c08201518160020160046101000a81548160ff021916908360ff16021790555060e08201518160020160056101000a81548160ff021916908360ff1602179055506101008201518160020160066101000a81548160ff021916908360ff160217905550905050817f2036cd788031480791614b2f778f4b472e1a16a7802e76f095f1d00ae4a2be7f826040516123aa9190614631565b60405180910390a25050565b6060600f80546123c590614a97565b80601f01602080910402602001604051908101604052809291908181526020018280546123f190614a97565b801561243e5780601f106124135761010080835404028352916020019161243e565b820191906000526020600020905b81548152906001019060200180831161242157829003601f168201915b5050505050905090565b60606000821415612490576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506125f0565b600082905060005b600082146124c25780806124ab90614afa565b915050600a826124bb91906148cf565b9150612498565b60008167ffffffffffffffff811115612504577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156125365781602001600182028036833780820191505090505b5090505b600085146125e95760018261254f919061495a565b9150600a8561255e9190614b43565b603061256a9190614879565b60f81b8183815181106125a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856125e291906148cf565b945061253a565b8093505050505b919050565b600061260382600001612e95565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006126aa8383612ea6565b612703578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612708565b600090505b92915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612781575061278082612ec9565b5b9050919050565b6127938383836116d1565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156127d6576127d181612f43565b612815565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612814576128138382612f8c565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561285857612853816130f9565b612897565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461289657612895828261323c565b5b5b505050565b505050565b6060600060028360026128b49190614900565b6128be9190614879565b67ffffffffffffffff8111156128fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561292f5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061298d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612a17577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612a579190614900565b612a619190614879565b90505b6001811115612b4d577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612ac9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b1a60f81b828281518110612b06577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612b4690614a6d565b9050612a64565b5060008414612b91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b88906143d5565b60405180910390fd5b8091505092915050565b612ba58282610f0f565b15612c79576000600a600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612c1e6117bc565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000612ca5836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6132bb565b905092915050565b6000826000018281548110612ceb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b6000612d1f8473ffffffffffffffffffffffffffffffffffffffff16613441565b15612e88578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612d486117bc565b8786866040518563ffffffff1660e01b8152600401612d6a9493929190614331565b602060405180830381600087803b158015612d8457600080fd5b505af1925050508015612db557506040513d601f19601f82011682018060405250810190612db29190613c87565b60015b612e38573d8060008114612de5576040519150601f19603f3d011682016040523d82523d6000602084013e612dea565b606091505b50600081511415612e30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e2790614415565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612e8d565b600190505b949350505050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612f3c5750612f3b82613464565b5b9050919050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001612f9984610d6a565b612fa3919061495a565b9050600060076000848152602001908152602001600020549050818114613088576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b6000600160088054905061310d919061495a565b9050600060096000848152602001908152602001600020549050600060088381548110613163577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080600883815481106131ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480613220577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b600061324783610d6a565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600080836001016000848152602001908152602001600020549050600081146134355760006001826132ed919061495a565b9050600060018660000180549050613305919061495a565b90508181146133c057600086600001828154811061334c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110613396577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806133fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061343b565b60009150505b92915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061352f57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061353f575061353e82613546565b5b9050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b8280546135bc90614a97565b90600052602060002090601f0160209004810192826135de5760008555613625565b82601f106135f757805160ff1916838001178555613625565b82800160010185558215613625579182015b82811115613624578251825591602001919060010190613609565b5b5090506136329190613636565b5090565b5b8082111561364f576000816000905550600101613637565b5090565b6000613666613661846147d4565b6147af565b90508281526020810184848401111561367e57600080fd5b613689848285614a2b565b509392505050565b60006136a461369f84614805565b6147af565b9050828152602081018484840111156136bc57600080fd5b6136c7848285614a2b565b509392505050565b6000813590506136de81615189565b92915050565b6000813590506136f3816151a0565b92915050565b600081359050613708816151b7565b92915050565b60008135905061371d816151ce565b92915050565b600081519050613732816151ce565b92915050565b600082601f83011261374957600080fd5b8135613759848260208601613653565b91505092915050565b600081519050613771816151e5565b92915050565b600082601f83011261378857600080fd5b8135613798848260208601613691565b91505092915050565b600061018082840312156137b457600080fd5b6137bf6101806147af565b905060006137cf848285016139b0565b60008301525060206137e3848285016139b0565b60208301525060406137f7848285016139b0565b604083015250606061380b848285016139b0565b606083015250608061381f848285016139b0565b60808301525060a0613833848285016139b0565b60a08301525060c0613847848285016139b0565b60c08301525060e061385b848285016139b0565b60e083015250610100613870848285016139b0565b61010083015250610120613886848285016139b0565b6101208301525061014061389c848285016139b0565b610140830152506101606138b2848285016139b0565b6101608301525092915050565b600061012082840312156138d257600080fd5b6138dd6101206147af565b905060006138ed8482850161399b565b60008301525060206139018482850161399b565b6020830152506040613915848285016139b0565b6040830152506060613929848285016139b0565b606083015250608061393d848285016139b0565b60808301525060a0613951848285016139b0565b60a08301525060c0613965848285016139b0565b60c08301525060e0613979848285016139b0565b60e08301525061010061398e848285016139b0565b6101008301525092915050565b6000813590506139aa816151fc565b92915050565b6000813590506139bf81615213565b92915050565b6000602082840312156139d757600080fd5b60006139e5848285016136cf565b91505092915050565b60008060408385031215613a0157600080fd5b6000613a0f858286016136cf565b9250506020613a20858286016136cf565b9150509250929050565b600080600060608486031215613a3f57600080fd5b6000613a4d868287016136cf565b9350506020613a5e868287016136cf565b9250506040613a6f8682870161399b565b9150509250925092565b60008060008060808587031215613a8f57600080fd5b6000613a9d878288016136cf565b9450506020613aae878288016136cf565b9350506040613abf8782880161399b565b925050606085013567ffffffffffffffff811115613adc57600080fd5b613ae887828801613738565b91505092959194509250565b60008060408385031215613b0757600080fd5b6000613b15858286016136cf565b9250506020613b26858286016136e4565b9150509250929050565b60008060006102c08486031215613b4657600080fd5b6000613b54868287016136cf565b9350506020613b65868287016137a1565b9250506101a0613b77868287016138bf565b9150509250925092565b60008060408385031215613b9457600080fd5b6000613ba2858286016136cf565b9250506020613bb38582860161399b565b9150509250929050565b600060208284031215613bcf57600080fd5b6000613bdd848285016136f9565b91505092915050565b60008060408385031215613bf957600080fd5b6000613c07858286016136f9565b9250506020613c18858286016136cf565b9150509250929050565b60008060408385031215613c3557600080fd5b6000613c43858286016136f9565b9250506020613c548582860161399b565b9150509250929050565b600060208284031215613c7057600080fd5b6000613c7e8482850161370e565b91505092915050565b600060208284031215613c9957600080fd5b6000613ca784828501613723565b91505092915050565b600060208284031215613cc257600080fd5b6000613cd084828501613762565b91505092915050565b600060208284031215613ceb57600080fd5b600082013567ffffffffffffffff811115613d0557600080fd5b613d1184828501613777565b91505092915050565b600060208284031215613d2c57600080fd5b6000613d3a8482850161399b565b91505092915050565b613d4c8161498e565b82525050565b613d5b816149a0565b82525050565b613d6a816149ac565b82525050565b6000613d7b82614836565b613d85818561484c565b9350613d95818560208601614a3a565b613d9e81614c30565b840191505092915050565b6000613db482614841565b613dbe818561485d565b9350613dce818560208601614a3a565b613dd781614c30565b840191505092915050565b6000613ded82614841565b613df7818561486e565b9350613e07818560208601614a3a565b80840191505092915050565b6000613e2060208361485d565b9150613e2b82614c41565b602082019050919050565b6000613e43602b8361485d565b9150613e4e82614c6a565b604082019050919050565b6000613e6660328361485d565b9150613e7182614cb9565b604082019050919050565b6000613e8960258361485d565b9150613e9482614d08565b604082019050919050565b6000613eac601c8361485d565b9150613eb782614d57565b602082019050919050565b6000613ecf60248361485d565b9150613eda82614d80565b604082019050919050565b6000613ef260198361485d565b9150613efd82614dcf565b602082019050919050565b6000613f15602c8361485d565b9150613f2082614df8565b604082019050919050565b6000613f3860388361485d565b9150613f4382614e47565b604082019050919050565b6000613f5b602a8361485d565b9150613f6682614e96565b604082019050919050565b6000613f7e60298361485d565b9150613f8982614ee5565b604082019050919050565b6000613fa160208361485d565b9150613fac82614f34565b602082019050919050565b6000613fc4602c8361485d565b9150613fcf82614f5d565b604082019050919050565b6000613fe7602f8361485d565b9150613ff282614fac565b604082019050919050565b600061400a60218361485d565b915061401582614ffb565b604082019050919050565b600061402d60318361485d565b91506140388261504a565b604082019050919050565b6000614050602c8361485d565b915061405b82615099565b604082019050919050565b600061407360178361486e565b915061407e826150e8565b601782019050919050565b600061409660118361486e565b91506140a182615111565b601182019050919050565b60006140b9602f8361485d565b91506140c48261513a565b604082019050919050565b610180820160008201516140e6600085018261429a565b5060208201516140f9602085018261429a565b50604082015161410c604085018261429a565b50606082015161411f606085018261429a565b506080820151614132608085018261429a565b5060a082015161414560a085018261429a565b5060c082015161415860c085018261429a565b5060e082015161416b60e085018261429a565b5061010082015161418061010085018261429a565b5061012082015161419561012085018261429a565b506101408201516141aa61014085018261429a565b506101608201516141bf61016085018261429a565b50505050565b610120820160008201516141dc600085018261427c565b5060208201516141ef602085018261427c565b506040820151614202604085018261429a565b506060820151614215606085018261429a565b506080820151614228608085018261429a565b5060a082015161423b60a085018261429a565b5060c082015161424e60c085018261429a565b5060e082015161426160e085018261429a565b5061010082015161427661010085018261429a565b50505050565b61428581614a14565b82525050565b61429481614a14565b82525050565b6142a381614a1e565b82525050565b6142b281614a1e565b82525050565b60006142c48285613de2565b91506142d08284613de2565b91508190509392505050565b60006142e782614066565b91506142f38285613de2565b91506142fe82614089565b915061430a8284613de2565b91508190509392505050565b600060208201905061432b6000830184613d43565b92915050565b60006080820190506143466000830187613d43565b6143536020830186613d43565b614360604083018561428b565b81810360608301526143728184613d70565b905095945050505050565b60006020820190506143926000830184613d52565b92915050565b60006020820190506143ad6000830184613d61565b92915050565b600060208201905081810360008301526143cd8184613da9565b905092915050565b600060208201905081810360008301526143ee81613e13565b9050919050565b6000602082019050818103600083015261440e81613e36565b9050919050565b6000602082019050818103600083015261442e81613e59565b9050919050565b6000602082019050818103600083015261444e81613e7c565b9050919050565b6000602082019050818103600083015261446e81613e9f565b9050919050565b6000602082019050818103600083015261448e81613ec2565b9050919050565b600060208201905081810360008301526144ae81613ee5565b9050919050565b600060208201905081810360008301526144ce81613f08565b9050919050565b600060208201905081810360008301526144ee81613f2b565b9050919050565b6000602082019050818103600083015261450e81613f4e565b9050919050565b6000602082019050818103600083015261452e81613f71565b9050919050565b6000602082019050818103600083015261454e81613f94565b9050919050565b6000602082019050818103600083015261456e81613fb7565b9050919050565b6000602082019050818103600083015261458e81613fda565b9050919050565b600060208201905081810360008301526145ae81613ffd565b9050919050565b600060208201905081810360008301526145ce81614020565b9050919050565b600060208201905081810360008301526145ee81614043565b9050919050565b6000602082019050818103600083015261460e816140ac565b9050919050565b60006101808201905061462b60008301846140cf565b92915050565b60006101208201905061464760008301846141c5565b92915050565b6000602082019050614662600083018461428b565b92915050565b60006101208201905061467e600083018c61428b565b61468b602083018b61428b565b614698604083018a6142a9565b6146a560608301896142a9565b6146b260808301886142a9565b6146bf60a08301876142a9565b6146cc60c08301866142a9565b6146d960e08301856142a9565b6146e76101008301846142a9565b9a9950505050505050505050565b60006101808201905061470b600083018f6142a9565b614718602083018e6142a9565b614725604083018d6142a9565b614732606083018c6142a9565b61473f608083018b6142a9565b61474c60a083018a6142a9565b61475960c08301896142a9565b61476660e08301886142a9565b6147746101008301876142a9565b6147826101208301866142a9565b6147906101408301856142a9565b61479e6101608301846142a9565b9d9c50505050505050505050505050565b60006147b96147ca565b90506147c58282614ac9565b919050565b6000604051905090565b600067ffffffffffffffff8211156147ef576147ee614c01565b5b6147f882614c30565b9050602081019050919050565b600067ffffffffffffffff8211156148205761481f614c01565b5b61482982614c30565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061488482614a14565b915061488f83614a14565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156148c4576148c3614b74565b5b828201905092915050565b60006148da82614a14565b91506148e583614a14565b9250826148f5576148f4614ba3565b5b828204905092915050565b600061490b82614a14565b915061491683614a14565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561494f5761494e614b74565b5b828202905092915050565b600061496582614a14565b915061497083614a14565b92508282101561498357614982614b74565b5b828203905092915050565b6000614999826149f4565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006149ed8261498e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614a58578082015181840152602081019050614a3d565b83811115614a67576000848401525b50505050565b6000614a7882614a14565b91506000821415614a8c57614a8b614b74565b5b600182039050919050565b60006002820490506001821680614aaf57607f821691505b60208210811415614ac357614ac2614bd2565b5b50919050565b614ad282614c30565b810181811067ffffffffffffffff82111715614af157614af0614c01565b5b80604052505050565b6000614b0582614a14565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614b3857614b37614b74565b5b600182019050919050565b6000614b4e82614a14565b9150614b5983614a14565b925082614b6957614b68614ba3565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6151928161498e565b811461519d57600080fd5b50565b6151a9816149a0565b81146151b457600080fd5b50565b6151c0816149ac565b81146151cb57600080fd5b50565b6151d7816149b6565b81146151e257600080fd5b50565b6151ee816149e2565b81146151f957600080fd5b50565b61520581614a14565b811461521057600080fd5b50565b61521c81614a1e565b811461522757600080fd5b5056fea264697066735822122084895699c26425ac28364a60a4d131bb69d732ed94154ab23312c91a5ea7e94964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isApprovedForAll(address,address)": {
        "notice": "Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 662,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 664,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 668,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 672,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 676,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 682,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1651,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1655,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1658,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1662,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 24,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_roles",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 327,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)2900_storage)"
      },
      {
        "astId": 3209,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "proxyRegistryAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 3678,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "dna1",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(DNA1)3640_storage)"
      },
      {
        "astId": 3683,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "dna2",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(DNA2)3659_storage)"
      },
      {
        "astId": 3685,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "__baseURI",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 3687,
        "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
        "label": "__contractURI",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)2900_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2900_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(DNA1)3640_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WinzerERC721.DNA1)",
        "numberOfBytes": "32",
        "value": "t_struct(DNA1)3640_storage"
      },
      "t_mapping(t_uint256,t_struct(DNA2)3659_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WinzerERC721.DNA2)",
        "numberOfBytes": "32",
        "value": "t_struct(DNA2)3659_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)2900_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2899,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2599_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DNA1)3640_storage": {
        "encoding": "inplace",
        "label": "struct WinzerERC721.DNA1",
        "members": [
          {
            "astId": 3617,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "race",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3619,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "sex",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3621,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "skin",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3623,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "head",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3625,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "ears",
            "offset": 4,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3627,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "hair",
            "offset": 5,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3629,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "beard",
            "offset": 6,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3631,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "mouth",
            "offset": 7,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3633,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "eyes",
            "offset": 8,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3635,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "eyebrows",
            "offset": 9,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3637,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "nose",
            "offset": 10,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 3639,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "scars",
            "offset": 11,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DNA2)3659_storage": {
        "encoding": "inplace",
        "label": "struct WinzerERC721.DNA2",
        "members": [
          {
            "astId": 3642,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "father",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3644,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "mother",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3646,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "accessory",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 3648,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "makeup",
            "offset": 1,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 3650,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "skill1",
            "offset": 2,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 3652,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "skill2",
            "offset": 3,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 3654,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "skill3",
            "offset": 4,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 3656,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "skill4",
            "offset": 5,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 3658,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "skill5",
            "offset": 6,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2599_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2594,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2598,
            "contract": "contracts/winzers/WinzerERC721.sol:WinzerERC721",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}